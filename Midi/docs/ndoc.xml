<?xml version="1.0" encoding="utf-8"?>
<ndoc SchemaVersion="2.0" xmlns="urn:ndoc-schema">
  <copyright text="Copyright © 2009 Tom Lokovic" />
  <namespaceHierarchies>
    <namespaceHierarchy name="Midi">
      <hierarchyType id="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib">
        <hierarchyType id="T:Midi.ChannelExtensionMethods" displayName="ChannelExtensionMethods" namespace="Midi" assembly="Midi" />
        <hierarchyType id="T:Midi.Chord" displayName="Chord" namespace="Midi" assembly="Midi" />
        <hierarchyType id="T:Midi.ChordPattern" displayName="ChordPattern" namespace="Midi" assembly="Midi" />
        <hierarchyType id="T:Midi.Clock" displayName="Clock" namespace="Midi" assembly="Midi" />
        <hierarchyType id="T:Midi.ControlExtensionMethods" displayName="ControlExtensionMethods" namespace="Midi" assembly="Midi" />
        <hierarchyType id="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi">
          <hierarchyType id="T:Midi.InputDevice" displayName="InputDevice" namespace="Midi" assembly="Midi" />
          <hierarchyType id="T:Midi.OutputDevice" displayName="OutputDevice" namespace="Midi" assembly="Midi" />
        </hierarchyType>
        <hierarchyType id="T:Midi.InstrumentExtensionMethods" displayName="InstrumentExtensionMethods" namespace="Midi" assembly="Midi" />
        <hierarchyType id="T:Midi.IntervalExtensionMethods" displayName="IntervalExtensionMethods" namespace="Midi" assembly="Midi" />
        <hierarchyType id="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi">
          <hierarchyType id="T:Midi.CallbackMessage" displayName="CallbackMessage" namespace="Midi" assembly="Midi" />
          <hierarchyType id="T:Midi.DeviceMessage" displayName="DeviceMessage" namespace="Midi" assembly="Midi">
            <hierarchyType id="T:Midi.ChannelMessage" displayName="ChannelMessage" namespace="Midi" assembly="Midi">
              <hierarchyType id="T:Midi.ControlChangeMessage" displayName="ControlChangeMessage" namespace="Midi" assembly="Midi" />
              <hierarchyType id="T:Midi.NoteMessage" displayName="NoteMessage" namespace="Midi" assembly="Midi">
                <hierarchyType id="T:Midi.NoteOffMessage" displayName="NoteOffMessage" namespace="Midi" assembly="Midi" />
                <hierarchyType id="T:Midi.NoteOnMessage" displayName="NoteOnMessage" namespace="Midi" assembly="Midi" />
                <hierarchyType id="T:Midi.NoteOnOffMessage" displayName="NoteOnOffMessage" namespace="Midi" assembly="Midi" />
              </hierarchyType>
              <hierarchyType id="T:Midi.PitchBendMessage" displayName="PitchBendMessage" namespace="Midi" assembly="Midi" />
              <hierarchyType id="T:Midi.ProgramChangeMessage" displayName="ProgramChangeMessage" namespace="Midi" assembly="Midi" />
            </hierarchyType>
            <hierarchyType id="T:Midi.PercussionMessage" displayName="PercussionMessage" namespace="Midi" assembly="Midi" />
            <hierarchyType id="T:Midi.SysExMessage" displayName="SysExMessage" namespace="Midi" assembly="Midi" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:Midi.PercussionExtensionMethods" displayName="PercussionExtensionMethods" namespace="Midi" assembly="Midi" />
        <hierarchyType id="T:Midi.PitchExtensionMethods" displayName="PitchExtensionMethods" namespace="Midi" assembly="Midi" />
        <hierarchyType id="T:Midi.Scale" displayName="Scale" namespace="Midi" assembly="Midi" />
        <hierarchyType id="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" />
        <hierarchyType id="T:System.Delegate" displayName="Delegate" namespace="System" assembly="mscorlib">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.ICloneable" displayName="ICloneable" namespace="System" fullName="System.ICloneable" assembly="mscorlib" />
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" assembly="mscorlib" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.MulticastDelegate" displayName="MulticastDelegate" namespace="System" assembly="mscorlib">
            <hierarchyType id="T:Midi.CallbackMessage.CallbackType" displayName="CallbackMessage.CallbackType" namespace="Midi" assembly="Midi" />
            <hierarchyType id="T:Midi.InputDevice.ControlChangeHandler" displayName="InputDevice.ControlChangeHandler" namespace="Midi" assembly="Midi" />
            <hierarchyType id="T:Midi.InputDevice.NoteOffHandler" displayName="InputDevice.NoteOffHandler" namespace="Midi" assembly="Midi" />
            <hierarchyType id="T:Midi.InputDevice.NoteOnHandler" displayName="InputDevice.NoteOnHandler" namespace="Midi" assembly="Midi" />
            <hierarchyType id="T:Midi.InputDevice.PitchBendHandler" displayName="InputDevice.PitchBendHandler" namespace="Midi" assembly="Midi" />
            <hierarchyType id="T:Midi.InputDevice.ProgramChangeHandler" displayName="InputDevice.ProgramChangeHandler" namespace="Midi" assembly="Midi" />
            <hierarchyType id="T:Midi.InputDevice.SysExHandler" displayName="InputDevice.SysExHandler" namespace="Midi" assembly="Midi" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib">
          <hierarchyInterfaces>
            <hierarchyInterface id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" fullName="System.Runtime.Serialization.ISerializable" assembly="mscorlib" />
          </hierarchyInterfaces>
          <hierarchyType id="T:System.ApplicationException" displayName="ApplicationException" namespace="System" assembly="mscorlib">
            <hierarchyType id="T:Midi.DeviceException" displayName="DeviceException" namespace="Midi" assembly="Midi" />
          </hierarchyType>
        </hierarchyType>
        <hierarchyType id="T:System.ValueType" displayName="ValueType" namespace="System" assembly="mscorlib">
          <hierarchyType id="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" />
          <hierarchyType id="T:System.Enum" displayName="Enum" namespace="System" assembly="mscorlib">
            <hierarchyInterfaces>
              <hierarchyInterface id="T:System.IComparable" displayName="IComparable" namespace="System" fullName="System.IComparable" assembly="mscorlib" />
              <hierarchyInterface id="T:System.IConvertible" displayName="IConvertible" namespace="System" fullName="System.IConvertible" assembly="mscorlib" />
              <hierarchyInterface id="T:System.IFormattable" displayName="IFormattable" namespace="System" fullName="System.IFormattable" assembly="mscorlib" />
            </hierarchyInterfaces>
            <hierarchyType id="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" />
            <hierarchyType id="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" />
            <hierarchyType id="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" />
            <hierarchyType id="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" />
            <hierarchyType id="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" />
            <hierarchyType id="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" />
          </hierarchyType>
        </hierarchyType>
      </hierarchyType>
    </namespaceHierarchy>
  </namespaceHierarchies>
  <assembly name="Midi" version="1.1.0.0">
    <assemblyReference name="mscorlib" />
    <assemblyReference name="System" />
    <assemblyReference name="System.Core" />
    <attribute name="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" target="assembly">
      <property name="WrapNonExceptionThrows" type="System.Boolean" value="True" />
    </attribute>
    <attribute name="System.Reflection.AssemblyProductAttribute" target="assembly">
      <property name="Product" type="System.String" value="&quot;MidiDotNet&quot;" />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.CompilationRelaxationsAttribute" target="assembly">
      <property name="CompilationRelaxations" type="System.Int32" value="8" />
    </attribute>
    <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" target="assembly" />
    <attribute name="System.Reflection.AssemblyTitleAttribute" target="assembly">
      <property name="Title" type="System.String" value="&quot;MidiDotNet&quot;" />
    </attribute>
    <attribute name="System.Reflection.AssemblyDescriptionAttribute" target="assembly">
      <property name="Description" type="System.String" value="&quot;&quot;" />
    </attribute>
    <attribute name="System.Reflection.AssemblyConfigurationAttribute" target="assembly">
      <property name="Configuration" type="System.String" value="&quot;&quot;" />
    </attribute>
    <attribute name="System.Reflection.AssemblyCompanyAttribute" target="assembly">
      <property name="Company" type="System.String" value="&quot;&quot;" />
    </attribute>
    <attribute name="System.Reflection.AssemblyCopyrightAttribute" target="assembly">
      <property name="Copyright" type="System.String" value="&quot;Copyright © Tom Lokovic 2009&quot;" />
    </attribute>
    <attribute name="System.Reflection.AssemblyTrademarkAttribute" target="assembly">
      <property name="Trademark" type="System.String" value="&quot;&quot;" />
    </attribute>
    <attribute name="System.Runtime.InteropServices.ComVisibleAttribute" target="assembly">
      <property name="Value" type="System.Boolean" value="False" />
    </attribute>
    <attribute name="System.Runtime.InteropServices.GuidAttribute" target="assembly">
      <property name="Value" type="System.String" value="&quot;0550bef0-b706-4626-a02e-168b7be06af9&quot;" />
    </attribute>
    <attribute name="System.Reflection.AssemblyFileVersionAttribute" target="assembly">
      <property name="Version" type="System.String" value="&quot;1.1.0.0&quot;" />
    </attribute>
    <attribute name="System.Diagnostics.DebuggableAttribute" target="assembly">
      <property name="IsJITTrackingEnabled" type="System.Boolean" value="False" />
      <property name="IsJITOptimizerDisabled" type="System.Boolean" value="False" />
      <property name="DebuggingFlags" type="System.Diagnostics.DebuggableAttribute+DebuggingModes" value="DebuggingModes.IgnoreSymbolStoreSequencePoints" />
    </attribute>
    <module name="Midi.dll">
      <namespace name="Midi">
        <documentation>
          <summary>Classes providing MIDI support.</summary>
        </documentation>
        <class name="ChannelExtensionMethods" displayName="ChannelExtensionMethods" namespace="Midi" id="T:Midi.ChannelExtensionMethods" access="Public" static="true">
          <documentation><summary> Extension methods for the Channel enum. </summary></documentation>
          <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
          <method name="IsValid" displayName="IsValid" id="M:Midi.ChannelExtensionMethods.IsValid(Midi.Channel)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Returns true if the specified channel is valid. </summary>
<param name="channel">The channel to test.</param></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="channel" extension="true" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="Validate" displayName="Validate" id="M:Midi.ChannelExtensionMethods.Validate(Midi.Channel)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Throws an exception if channel is not valid. </summary>
<param name="channel">The channel to validate.</param>
<exception cref="T:System.ArgumentOutOfRangeException">The channel is out-of-range.</exception></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="channel" extension="true" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="Name" displayName="Name" id="M:Midi.ChannelExtensionMethods.Name(Midi.Channel)" access="Public" contract="Static" valueType="false">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> Returns the human-readable name of a MIDI channel. </summary>
<param name="channel">The channel.</param>
<exception cref="T:System.ArgumentOutOfRangeException">The channel is out-of-range.</exception></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="channel" extension="true" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.ChannelExtensionMethods.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.ChannelExtensionMethods.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.ChannelExtensionMethods.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.ChannelExtensionMethods.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.ChannelExtensionMethods.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.ChannelExtensionMethods.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="ChordPattern" displayName="ChordPattern" namespace="Midi" id="T:Midi.ChordPattern" access="Public">
          <documentation><summary> Description of a chord's pattern starting at the root note. </summary>
<remarks> This class describes the ascending sequence of notes included in a chord, starting with the root note. It is described in terms of semitones relative to root and letters relative to the root. To apply it to particular tonic, pass one of these to the constructor of <see cref="T:Midi.Chord" />. </remarks></documentation>
          <constructor name=".ctor" id="M:Midi.ChordPattern.#ctor(System.String,System.String,System.Int32[],System.Int32[])" access="Public" contract="Normal">
            <documentation><summary> Constructs a chord pattern. </summary>
<param name="name">The name of the chord pattern.</param>
<param name="abbreviation">The abbreviation for the chord. See the <see cref="P:Midi.ChordPattern.Abbreviation" /> property for details.</param>
<param name="ascent">Array encoding the notes in the chord. See the <see cref="P:Midi.ChordPattern.Ascent" /> property for details.</param>
<param name="letterOffsets">Array encoding the sequence of letters in the chord. Must be the same length as ascent. See the <see cref="P:Midi.ChordPattern.LetterOffsets" /> property for details.</param>
<exception cref="T:System.ArgumentException">ascent or letterOffsets is invalid, or they have different lengths.</exception>
<exception cref="T:System.ArgumentNullException">an argument is null.</exception></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="abbreviation" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="ascent" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
            </parameter>
            <parameter name="letterOffsets" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
            </parameter>
          </constructor>
          <property name="Name" id="P:Midi.ChordPattern.Name" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The name of the chord pattern. </summary></documentation>
          </property>
          <property name="Abbreviation" id="P:Midi.ChordPattern.Abbreviation" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> Abbreviation for this chord pattern. </summary>
<remarks> This is the string used in the abbreviated name for a chord, placed immediately after the tonic and before the slashed inversion (if there is one). For example, for minor chords the abbreviation is "m", as in "Am". </remarks></documentation>
          </property>
          <property name="Ascent" id="P:Midi.ChordPattern.Ascent" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <array rank="1" />
            <documentation><summary> The ascending note sequence of the chord, in semitones-above-the-root. </summary>
<remarks>
  <para>This sequence starts at zero (for the root) and is monotonically increasing, each element representing a pitch in semitones above the root.</para>
</remarks></documentation>
          </property>
          <property name="LetterOffsets" id="P:Midi.ChordPattern.LetterOffsets" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <array rank="1" />
            <documentation><summary> The sequence of letters in the chord. </summary>
<remarks>
  <para>This array describes what sequence of letters appears in this chord. Each element is a "letter offset", a positive integer that tell you how many letters to move up from the root for that note. It must start at zero, representing the letter for the root note.</para>
</remarks></documentation>
          </property>
          <method name="ToString" displayName="ToString" id="M:Midi.ChordPattern.ToString" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> ToString returns the pattern name. </summary>
<returns>The pattern's name, such as "Major" or "Minor".</returns></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.ChordPattern.Equals(System.Object)" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Value equality. </summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.ChordPattern.GetHashCode" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Hash code. </summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.ChordPattern.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.ChordPattern.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.ChordPattern.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <operator name="op_Equality" id="M:Midi.ChordPattern.op_Equality(Midi.ChordPattern,Midi.ChordPattern)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Equality operator does value equality. </summary></documentation>
            <parameter name="a" typeId="T:Midi.ChordPattern" displayName="ChordPattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="b" typeId="T:Midi.ChordPattern" displayName="ChordPattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
          </operator>
          <operator name="op_Inequality" id="M:Midi.ChordPattern.op_Inequality(Midi.ChordPattern,Midi.ChordPattern)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Inequality operator does value inequality. </summary></documentation>
            <parameter name="a" typeId="T:Midi.ChordPattern" displayName="ChordPattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="b" typeId="T:Midi.ChordPattern" displayName="ChordPattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
          </operator>
        </class>
        <class name="Chord" displayName="Chord" namespace="Midi" id="T:Midi.Chord" access="Public">
          <documentation><summary> A chord. </summary>
<remarks>
  <para>A chord is defined by its root note, the sequence of semitones, the sequence of letters, and the inversion. The root note is described with a <see cref="T:Midi.Note" /> because we want to be able to talk about the chord independent of any one octave. The pattern of semitones and letters is given by the <see cref="P:Midi.Chord.Pattern" /> nested class. The inversion is an integer indicating how many rotations the pattern has undergone. </para>
  <para>This class comes with a collection of predefined chord patterns, such as <see cref="F:Midi.Chord.Major" /> and <see cref="F:Midi.Chord.Minor" />.</para>
</remarks></documentation>
          <constructor name=".ctor" id="M:Midi.Chord.#ctor(Midi.Note,Midi.ChordPattern,System.Int32)" access="Public" contract="Normal" overload="1">
            <documentation><summary> Constructs a chord from its root note, pattern, and inversion. </summary>
<param name="root">The root note of the chord.</param>
<param name="pattern">The chord pattern.</param>
<param name="inversion">The inversion, in [0..N-1] where N is the number of notes in pattern.</param>
<exception cref="T:System.ArgumentNullException">pattern is null.</exception>
<exception cref="T:System.ArgumentOutOfRangeException">inversion is out of range.</exception></documentation>
            <parameter name="root" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="pattern" typeId="T:Midi.ChordPattern" displayName="ChordPattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="inversion" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <constructor name=".ctor" id="M:Midi.Chord.#ctor(System.String)" access="Public" contract="Normal" overload="2">
            <documentation><summary> Constructs a chord from a string. </summary>
<param name="name">The name to parse. This is the same format as the Name property: a letter in ['A'..'G'], an optional series of accidentals (#'s or b's), then an optional inversion specified as a '/' followed by another note name. If the inversion is present it must be one of the notes in the chord.</param>
<exception cref="T:System.ArgumentNullException">name is null.</exception>
<exception cref="T:System.ArgumentException">cannot parse a chord from name.</exception></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <field name="Major" id="F:Midi.Chord.Major" access="Public" contract="Static" typeId="T:Midi.ChordPattern" displayName="ChordPattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> Pattern for Major chords. </summary></documentation>
          </field>
          <field name="Minor" id="F:Midi.Chord.Minor" access="Public" contract="Static" typeId="T:Midi.ChordPattern" displayName="ChordPattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> Pattern for Minor chords. </summary></documentation>
          </field>
          <field name="Seventh" id="F:Midi.Chord.Seventh" access="Public" contract="Static" typeId="T:Midi.ChordPattern" displayName="ChordPattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> Pattern for Seventh chords. </summary></documentation>
          </field>
          <field name="Augmented" id="F:Midi.Chord.Augmented" access="Public" contract="Static" typeId="T:Midi.ChordPattern" displayName="ChordPattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> Pattern for Augmented chords. </summary></documentation>
          </field>
          <field name="Diminished" id="F:Midi.Chord.Diminished" access="Public" contract="Static" typeId="T:Midi.ChordPattern" displayName="ChordPattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> Pattern for Diminished chords. </summary></documentation>
          </field>
          <field name="Patterns" id="F:Midi.Chord.Patterns" access="Public" contract="Static" typeId="T:Midi.ChordPattern" displayName="ChordPattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <array rank="1" />
            <documentation><summary> Array of all the built-in chord patterns. </summary></documentation>
          </field>
          <property name="Name" id="P:Midi.Chord.Name" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The name of this chord. </summary></documentation>
          </property>
          <property name="Root" id="P:Midi.Chord.Root" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>The root note of this chord.</summary></documentation>
          </property>
          <property name="Bass" id="P:Midi.Chord.Bass" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>The bass note of this chord.</summary></documentation>
          </property>
          <property name="Pattern" id="P:Midi.Chord.Pattern" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.ChordPattern" displayName="ChordPattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary>The pattern of this chord.</summary></documentation>
          </property>
          <property name="Inversion" id="P:Midi.Chord.Inversion" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary>The inversion of this chord.</summary></documentation>
          </property>
          <property name="NoteSequence" id="P:Midi.Chord.NoteSequence" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <array rank="1" />
            <documentation><summary> The sequence of notes in this chord. </summary></documentation>
          </property>
          <method name="FindMatchingChords" displayName="FindMatchingChords" id="M:Midi.Chord.FindMatchingChords(System.Collections.Generic.List{Midi.Pitch})" access="Public" contract="Static" valueType="false">
            <returnType typeId="T:System.Collections.Generic.List`1" displayName="List{Chord}" namespace="System.Collections.Generic" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="Chord" displayName="Chord" namespace="Midi" typeId="T:Midi.Chord" assembly="Midi" />
            </returnType>
            <documentation><summary> Returns a list of chords which match the set of input pitches. </summary>
<param name="pitches">Notes being analyzed.</param>
<returns>A (possibly empty) list of chords.</returns></documentation>
            <parameter name="pitches" typeId="T:System.Collections.Generic.List`1" displayName="List{Pitch}" namespace="System.Collections.Generic" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="Pitch" displayName="Pitch" namespace="Midi" typeId="T:Midi.Pitch" assembly="Midi" />
            </parameter>
          </method>
          <method name="Contains" displayName="Contains" id="M:Midi.Chord.Contains(Midi.Pitch)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Returns true if this chord contains the specified pitch. </summary>
<param name="pitch">The pitch to test.</param>
<returns>True if this chord contains the pitch.</returns></documentation>
            <parameter name="pitch" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.Chord.ToString" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> ToString returns the chord name. </summary>
<returns>The chord's name.</returns></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.Chord.Equals(System.Object)" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Value equality. </summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.Chord.GetHashCode" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Hash code. </summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.Chord.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.Chord.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.Chord.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <operator name="op_Equality" id="M:Midi.Chord.op_Equality(Midi.Chord,Midi.Chord)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Equality operator does value equality because Chord is immutable. </summary></documentation>
            <parameter name="a" typeId="T:Midi.Chord" displayName="Chord" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="b" typeId="T:Midi.Chord" displayName="Chord" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
          </operator>
          <operator name="op_Inequality" id="M:Midi.Chord.op_Inequality(Midi.Chord,Midi.Chord)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Inequality operator does value inequality because Chord is immutable. </summary></documentation>
            <parameter name="a" typeId="T:Midi.Chord" displayName="Chord" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="b" typeId="T:Midi.Chord" displayName="Chord" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
          </operator>
        </class>
        <class name="Clock" displayName="Clock" namespace="Midi" id="T:Midi.Clock" access="Public">
          <documentation><summary> A clock for scheduling MIDI messages in a rate-adjustable, pausable timeline. </summary>
<remarks>
  <para>Clock is used for scheduling MIDI messages. Though you can always send messages synchronously with the various <see cref="T:Midi.OutputDevice" />.Send* methods, doing so requires your code to be "ready" at the precise moment each message needs to be sent. In most cases, and especially in interactive programs, it's more convenient to describe messages that <i>will</i> be sent at specified points in the future, and then rely on a scheduler to make it happen. Clock is such a scheduler.</para>
  <h3>Basic usage</h3>
  <para> In the simplest case, Clock can be used to schedule a sequence of messages which is known in its entirety ahead of time. For example, this code snippet schedules two notes to play one after the other:</para>
  <code>Clock clock(120);  // beatsPerMinute=120
OutputDevice outputDevice = ...;
clock.Schedule(new NoteOnMessage(outputDevice, Channel.Channel1, Note.E4, 80, 0));
clock.Schedule(new NoteOffMessage(outputDevice, Channel.Channel1, Note.E4, 80, 1));
clock.Schedule(new NoteOnMessage(outputDevice, Channel.Channel1, Note.D4, 80, 1));
clock.Schedule(new NoteOffMessage(outputDevice, Channel.Channel1, Note.D4, 80, 2));
</code>
  <para>At this point, four messages have been scheduled, but they haven't been sent because the clock has not started. We can start the clock with <see cref="M:Midi.Clock.Start" />, pause it with <see cref="M:Midi.Clock.Stop" />, and reset it with <see cref="M:Midi.Clock.Reset" />. We can change the beats-per-minute at any time, even as the sequence is playing. And the playing happens in a background thread, so your client code can focus on arranging the notes and controlling the clock.</para>
  <para>You can even schedule new notes as the clock is playing. Generally you should schedule messages for times in the future; scheduling a message with a time in the past simply causes it to play immediately, which is probably not what you wanted.</para>
  <h3>NoteOnOffMessage and Self-Propagating Messages</h3>
  <para>In the above example, we wanted to play two notes but had to schedule four messages. This case is so common that we provide a convenience class, <see cref="T:Midi.NoteOnOffMessage" />, which encapsulates a Note On message and its corresponding Note Off message in a single unit. We could rewrite the above example as follows:</para>
  <code>Clock clock(120);  // beatsPerMinute=120
OutputDevice outputDevice = ...;
clock.Schedule(new NoteOnOffMessage(outputDevice, Channel.Channel1, Note.E4, 80, 0, 1));
clock.Schedule(new NoteOnOffMessage(outputDevice, Channel.Channel1, Note.D4, 80, 1, 1));
</code>
  <para>This works because each NoteOnOffMessage, when it is actually sent, does two things: it sends the Note On message to the output device, and <i>also</i> schedules the correponding Note Off message for the appropriate time in the future. This is an example of a <i>self-propagating message</i>: a message which, when triggered, schedules additional events for the future.</para>
  <para>You can design your own self-propagating messages by subclassing from <see cref="T:Midi.Message" />. For example, you could make a self-propagating MetronomeMessage which keeps a steady beat by always scheduling the <i>next</i> MetronomeMessage when it plays the current beat. However, subclassing can be tedious, and it is usually preferable to use <see cref="T:Midi.CallbackMessage" /> to call-out to your own code instead.</para>
</remarks>
<threadsafety static="true" instance="true" /></documentation>
          <constructor name=".ctor" id="M:Midi.Clock.#ctor(System.Single)" access="Public" contract="Normal">
            <documentation><summary> Constructs a midi clock with a given beats-per-minute. </summary>
<param name="beatsPerMinute">The initial beats-per-minute, which can be changed later. </param>
<remarks>
  <para>When constructed, the clock is not running, and so <see cref="P:Midi.Clock.Time" /> will return zero. Call <see cref="M:Midi.Clock.Start" /> when you are ready for the clock to start progressing (and scheduled messages to actually trigger). </para>
</remarks>
<exception cref="T:System.ArgumentOutOfRangeException">beatsPerMinute is non-positive</exception></documentation>
            <parameter name="beatsPerMinute" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Time" id="P:Midi.Clock.Time" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> This clock's current time in beats. </summary>
<remarks>
  <para>Normally, this method polls the clock's current time, and thus changes from moment to moment as long as the clock is running. However, when called from the scheduler thread (that is, from a <see cref="M:Midi.Message.SendNow">Message.SendNow</see> method or a <see cref="T:Midi.CallbackMessage" />), it returns the precise time at which the message was scheduled.</para>
  <para>For example, suppose a callback was scheduled for time T, and the scheduler managed to call that callback at time T+delta. In the callback, Time will return T for the duration of the callback. In any other thread, Time would return approximately T+delta.</para>
</remarks></documentation>
          </property>
          <property name="BeatsPerMinute" id="P:Midi.Clock.BeatsPerMinute" access="Public" contract="Normal" get="Public" set="Public" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Beats per minute property. </summary>
<remarks>
  <para>Setting this property changes the rate at which the clock progresses. If the clock is currently running, the new rate is effectively immediately.</para>
</remarks></documentation>
          </property>
          <property name="IsRunning" id="P:Midi.Clock.IsRunning" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Returns true if this clock is currently running. </summary></documentation>
          </property>
          <method name="Start" displayName="Start" id="M:Midi.Clock.Start" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Starts or resumes the clock. </summary>
<remarks>
  <para>This method causes the clock to start progressing at the rate given in the <see cref="P:Midi.Clock.BeatsPerMinute" /> property. It may only be called when the clock is not yet rnuning.</para>
  <para>If this is the first time Start is called, the clock starts at time zero and progresses from there. If the clock was previously started, stopped, and not reset, then Start effectively "unpauses" the clock, picking up at the left-off time, and resuming scheduling of any as-yet-unsent messages.</para>
  <para>This method creates a new thread which runs in the background and sends messages at the appropriate times. All <see cref="M:Midi.Message.SendNow">Message.SendNow</see> methods and <see cref="T:Midi.CallbackMessage" />s will be called in that thread.</para>
  <para>The scheduler thread is joined (shut down) in <see cref="M:Midi.Clock.Stop" />.</para>
</remarks>
<exception cref="T:System.InvalidOperationException">Clock is already running.</exception>
<seealso cref="M:Midi.Clock.Stop" />
<seealso cref="M:Midi.Clock.Reset" /></documentation>
          </method>
          <method name="Stop" displayName="Stop" id="M:Midi.Clock.Stop" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Stops the clock (but does not reset its time or discard pending events). </summary>
<remarks>
  <para>This method stops the progression of the clock. It may only be called when the clock is running.</para>
  <para>Any scheduled but as-yet-unsent messages remain in the queue. A consecutive call to <see cref="M:Midi.Clock.Start" /> can re-start the progress of the clock, or <see cref="M:Midi.Clock.Reset" /> can discard pending messages and reset the clock to zero.</para>
  <para>This method waits for any in-progress messages to be processed and joins (shuts down) the scheduler thread before returning, so when it returns you can be sure that no more messages will be sent or callbacks invoked.</para>
  <para>It is illegal to call Stop from the scheduler thread (ie, from any <see cref="M:Midi.Message.SendNow">Message.SendNow</see> method or <see cref="T:Midi.CallbackMessage" />. If a callback really needs to stop the clock, consider using BeginInvoke to arrange for it to happen in another thread.</para>
</remarks>
<exception cref="T:System.InvalidOperationException">Clock is not running or Stop was invoked from the scheduler thread.</exception>
<seealso cref="M:Midi.Clock.Start" />
<seealso cref="M:Midi.Clock.Reset" /></documentation>
          </method>
          <method name="Reset" displayName="Reset" id="M:Midi.Clock.Reset" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Resets the clock to zero and discards pending messages. </summary>
<remarks>
  <para>This method resets the clock to zero and discards any scheduled but as-yet-unsent messages. It may only be called when the clock is not running.</para>
</remarks>
<exception cref="T:System.InvalidOperationException">Clock is running.</exception>
<seealso cref="M:Midi.Clock.Start" />
<seealso cref="M:Midi.Clock.Stop" /></documentation>
          </method>
          <method name="Schedule" displayName="Schedule" id="M:Midi.Clock.Schedule(Midi.Message)" access="Public" contract="Normal" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Schedules a single message based on its beatTime. </summary>
<param name="message">The message to schedule.</param>
<remarks>
  <para>This method schedules a message to be sent at the time indicated in the message's <see cref="P:Midi.Message.Time" /> property. It may be called at any time, whether the clock is running or not. The message will not be sent until the clock progresses to the specified time. (If the clock is never started, or is paused before that time and not re-started, then the message will never be sent.)</para>
  <para>If a message is scheduled for a time that has already passed, then the scheduler will send the message at the first opportunity.</para>
</remarks></documentation>
            <parameter name="message" typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
          </method>
          <method name="Schedule" displayName="Schedule" id="M:Midi.Clock.Schedule(System.Collections.Generic.List{Midi.Message},System.Single)" access="Public" contract="Normal" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Schedules a collection of messages, applying an optional time delta to the scheduled beatTime. </summary>
<param name="messages">The message to send</param>
<param name="beatTimeDelta">The delta to apply (or zero).</param></documentation>
            <parameter name="messages" typeId="T:System.Collections.Generic.List`1" displayName="List{Message}" namespace="System.Collections.Generic" assembly="mscorlib" nullable="false" valueType="false">
              <genericargument name="Message" displayName="Message" namespace="Midi" typeId="T:Midi.Message" assembly="Midi" />
            </parameter>
            <parameter name="beatTimeDelta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.Clock.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.Clock.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.Clock.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.Clock.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.Clock.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.Clock.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="ControlExtensionMethods" displayName="ControlExtensionMethods" namespace="Midi" id="T:Midi.ControlExtensionMethods" access="Public" static="true">
          <documentation><summary> Extension methods for the Control enum. </summary> Be sure to "using midi" if you want to use these as extension methods.</documentation>
          <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
          <method name="IsValid" displayName="IsValid" id="M:Midi.ControlExtensionMethods.IsValid(Midi.Control)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Returns true if the specified control is valid. </summary>
<param name="control">The Control to test.</param></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="control" extension="true" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="Validate" displayName="Validate" id="M:Midi.ControlExtensionMethods.Validate(Midi.Control)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Throws an exception if control is not valid. </summary>
<param name="control">The control to validate.</param>
<exception cref="T:System.ArgumentOutOfRangeException">The control is out-of-range.</exception></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="control" extension="true" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="Name" displayName="Name" id="M:Midi.ControlExtensionMethods.Name(Midi.Control)" access="Public" contract="Static" valueType="false">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> Returns the human-readable name of a MIDI control. </summary>
<param name="control">The control.</param>
<exception cref="T:System.ArgumentOutOfRangeException">The control is out-of-range.</exception></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="control" extension="true" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.ControlExtensionMethods.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.ControlExtensionMethods.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.ControlExtensionMethods.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.ControlExtensionMethods.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.ControlExtensionMethods.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.ControlExtensionMethods.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="DeviceBase" displayName="DeviceBase" namespace="Midi" id="T:Midi.DeviceBase" access="Public">
          <documentation><summary> Common base class for input and output devices. </summary> This base class exists mainly so that input and output devices can both go into the same kinds of MidiMessages.</documentation>
          <derivedBy id="T:Midi.InputDevice" displayName="InputDevice" namespace="Midi" assembly="Midi" />
          <derivedBy id="T:Midi.OutputDevice" displayName="OutputDevice" namespace="Midi" assembly="Midi" />
          <constructor name=".ctor" id="M:Midi.DeviceBase.#ctor(System.String)" access="Family" contract="Normal">
            <documentation><summary> Protected constructor. </summary>
<param name="name">The name of this device.</param></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <property name="Name" id="P:Midi.DeviceBase.Name" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The name of this device. </summary></documentation>
          </property>
          <method name="ToString" displayName="ToString" id="M:Midi.DeviceBase.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.DeviceBase.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.DeviceBase.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.DeviceBase.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.DeviceBase.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.DeviceBase.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="DeviceException" displayName="DeviceException" namespace="Midi" id="T:Midi.DeviceException" access="Public">
          <documentation><summary> Exception thrown when an operation on a MIDI device cannot be satisfied. </summary></documentation>
          <baseType name="ApplicationException" id="T:System.ApplicationException" displayName="ApplicationException" namespace="System" assembly="mscorlib">
            <baseType name="Exception" id="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" />
          </baseType>
          <implementsClass type="System.Runtime.Serialization.ISerializable" id="T:System.Runtime.Serialization.ISerializable" displayName="ISerializable" namespace="System.Runtime.Serialization" inherited="true" />
          <constructor name=".ctor" id="M:Midi.DeviceException.#ctor(System.String)" access="Public" contract="Normal">
            <documentation><summary> Constructs exception with a specific error message. </summary>
<param name="message"></param></documentation>
            <parameter name="message" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <property name="Message" id="P:Midi.DeviceException.Message" access="Public" contract="Virtual" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.Message" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          <property name="Data" id="P:Midi.DeviceException.Data" access="Public" contract="Virtual" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.Data" get="Public" set="false" typeId="T:System.Collections.IDictionary" displayName="IDictionary" namespace="System.Collections" assembly="mscorlib" nullable="false" valueType="false" />
          <property name="InnerException" id="P:Midi.DeviceException.InnerException" access="Public" contract="Final" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.InnerException" get="Public" set="false" typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          <property name="TargetSite" id="P:Midi.DeviceException.TargetSite" access="Public" contract="Final" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.TargetSite" get="Public" set="false" typeId="T:System.Reflection.MethodBase" displayName="MethodBase" namespace="System.Reflection" assembly="mscorlib" nullable="false" valueType="false" />
          <property name="StackTrace" id="P:Midi.DeviceException.StackTrace" access="Public" contract="Virtual" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.StackTrace" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          <property name="HelpLink" id="P:Midi.DeviceException.HelpLink" access="Public" contract="Virtual" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.HelpLink" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          <property name="Source" id="P:Midi.DeviceException.Source" access="Public" contract="Virtual" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.Source" get="Public" set="Public" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          <property name="HResult" id="P:Midi.DeviceException.HResult" access="Family" contract="Normal" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="P:System.Exception.HResult" get="Family" set="Family" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          <method name="GetBaseException" displayName="GetBaseException" id="M:Midi.DeviceException.GetBaseException" access="Public" contract="Virtual" valueType="false" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="M:System.Exception.GetBaseException">
            <returnType typeId="T:System.Exception" displayName="Exception" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.DeviceException.ToString" access="Public" contract="Override" valueType="false" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="M:System.Exception.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetObjectData" displayName="GetObjectData" id="M:Midi.DeviceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Public" contract="Virtual" valueType="true" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Security.Permissions.SecurityPermissionAttribute">
              <property name="Flags" type="System.Security.Permissions.SecurityPermissionFlag" value="SecurityPermissionFlag.SerializationFormatter" />
              <property name="Assertion" type="System.Boolean" value="False" />
              <property name="UnmanagedCode" type="System.Boolean" value="False" />
              <property name="SkipVerification" type="System.Boolean" value="False" />
              <property name="Execution" type="System.Boolean" value="False" />
              <property name="ControlThread" type="System.Boolean" value="False" />
              <property name="ControlEvidence" type="System.Boolean" value="False" />
              <property name="ControlPolicy" type="System.Boolean" value="False" />
              <property name="SerializationFormatter" type="System.Boolean" value="True" />
              <property name="ControlDomainPolicy" type="System.Boolean" value="False" />
              <property name="ControlPrincipal" type="System.Boolean" value="False" />
              <property name="ControlAppDomain" type="System.Boolean" value="False" />
              <property name="RemotingConfiguration" type="System.Boolean" value="False" />
              <property name="Infrastructure" type="System.Boolean" value="False" />
              <property name="BindingRedirects" type="System.Boolean" value="False" />
              <property name="Action" type="System.Security.Permissions.SecurityAction" value="SecurityAction.LinkDemand" />
              <property name="Unrestricted" type="System.Boolean" value="False" />
            </attribute>
            <parameter name="info" typeId="T:System.Runtime.Serialization.SerializationInfo" displayName="SerializationInfo" namespace="System.Runtime.Serialization" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="context" typeId="T:System.Runtime.Serialization.StreamingContext" displayName="StreamingContext" namespace="System.Runtime.Serialization" assembly="mscorlib" nullable="false" valueType="true" />
            <implements name="GetObjectData" id="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" interface="ISerializable" interfaceId="T:System.Runtime.Serialization.ISerializable" assembly="mscorlib">
              <declaringType name="T:System.Runtime.Serialization.ISerializable" />
            </implements>
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.DeviceException.GetType" access="Public" contract="Final" valueType="false" declaringType="System.Exception" declaringAssembly="mscorlib" declaringId="M:System.Exception.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.DeviceException.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.DeviceException.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.DeviceException.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.DeviceException.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="InstrumentExtensionMethods" displayName="InstrumentExtensionMethods" namespace="Midi" id="T:Midi.InstrumentExtensionMethods" access="Public" static="true">
          <documentation><summary> Extension methods for the Instrument enum. </summary></documentation>
          <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
          <method name="IsValid" displayName="IsValid" id="M:Midi.InstrumentExtensionMethods.IsValid(Midi.Instrument)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Returns true if the specified instrument is valid. </summary>
<param name="instrument">The instrument to test.</param></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="instrument" extension="true" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="Validate" displayName="Validate" id="M:Midi.InstrumentExtensionMethods.Validate(Midi.Instrument)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Throws an exception if instrument is not valid. </summary>
<param name="instrument">The instrument to validate.</param>
<exception cref="T:System.ArgumentOutOfRangeException">The instrument is out-of-range. </exception></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="instrument" extension="true" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="Name" displayName="Name" id="M:Midi.InstrumentExtensionMethods.Name(Midi.Instrument)" access="Public" contract="Static" valueType="false">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> Returns the human-readable name of a MIDI instrument. </summary>
<param name="instrument">The instrument.</param>
<exception cref="T:System.ArgumentOutOfRangeException">The instrument is out-of-range. </exception></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="instrument" extension="true" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.InstrumentExtensionMethods.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.InstrumentExtensionMethods.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.InstrumentExtensionMethods.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.InstrumentExtensionMethods.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.InstrumentExtensionMethods.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.InstrumentExtensionMethods.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="IntervalExtensionMethods" displayName="IntervalExtensionMethods" namespace="Midi" id="T:Midi.IntervalExtensionMethods" access="Public" static="true">
          <documentation><summary> Extension methods for the Interval enum. </summary></documentation>
          <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
          <method name="Name" displayName="Name" id="M:Midi.IntervalExtensionMethods.Name(Midi.Interval)" access="Public" contract="Static" valueType="false">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> Returns the human-readable name of an interval. </summary>
<param name="interval">The interval.</param>
<returns>The human-readable name. If the interval is less than an octave, it gives the standard term (eg, "Major third"). If the interval is more than an octave, it gives the number of semitones in the interval.</returns></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="interval" extension="true" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.IntervalExtensionMethods.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.IntervalExtensionMethods.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.IntervalExtensionMethods.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.IntervalExtensionMethods.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.IntervalExtensionMethods.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.IntervalExtensionMethods.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="PercussionExtensionMethods" displayName="PercussionExtensionMethods" namespace="Midi" id="T:Midi.PercussionExtensionMethods" access="Public" static="true">
          <documentation><summary> Extension methods for the Percussion enum. </summary> Be sure to "using midi" if you want to use these as extension methods.</documentation>
          <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
          <method name="IsValid" displayName="IsValid" id="M:Midi.PercussionExtensionMethods.IsValid(Midi.Percussion)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Returns true if the specified percussion is valid. </summary>
<param name="percussion">The percussion to test.</param></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="percussion" extension="true" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="Validate" displayName="Validate" id="M:Midi.PercussionExtensionMethods.Validate(Midi.Percussion)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Throws an exception if percussion is not valid. </summary>
<param name="percussion">The percussion to validate.</param>
<exception cref="T:System.ArgumentOutOfRangeException">The percussion is out-of-range. </exception></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="percussion" extension="true" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="Name" displayName="Name" id="M:Midi.PercussionExtensionMethods.Name(Midi.Percussion)" access="Public" contract="Static" valueType="false">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> Returns the human-readable name of a MIDI percussion. </summary>
<param name="percussion">The percussion.</param></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="percussion" extension="true" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.PercussionExtensionMethods.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.PercussionExtensionMethods.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.PercussionExtensionMethods.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.PercussionExtensionMethods.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.PercussionExtensionMethods.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.PercussionExtensionMethods.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="InputDevice" displayName="InputDevice" namespace="Midi" id="T:Midi.InputDevice" access="Public">
          <documentation><summary> A MIDI input device. </summary>
<remarks>
  <para>Each instance of this class describes a MIDI input device installed on the system. You cannot create your own instances, but instead must go through the <see cref="P:Midi.InputDevice.InstalledDevices" /> property to find which devices are available. You may wish to examine the <see cref="P:Midi.DeviceBase.Name" /> property of each one and present the user with a choice of which device(s) to use.</para>
  <para>Open an input device with <see cref="M:Midi.InputDevice.Open" /> and close it with <see cref="M:Midi.InputDevice.Close" />. While it is open, you may arrange to start receiving messages with <see cref="M:Midi.InputDevice.StartReceiving(Midi.Clock)" /> and then stop receiving them with <see cref="M:Midi.InputDevice.StopReceiving" />. An input device can only receive messages when it is both open and started.</para>
  <para>Incoming messages are routed to the corresponding events, such as <see cref="E:Midi.InputDevice.NoteOn" /> and <see cref="E:Midi.InputDevice.ProgramChange" />. The event handlers are invoked on a background thread which is started in <see cref="M:Midi.InputDevice.StartReceiving(Midi.Clock)" nolink="true" /> and stopped in <see cref="M:Midi.InputDevice.StopReceiving" nolink="true" />. </para>
  <para>As each message is received, it is assigned a timestamp in one of two ways. If <see cref="M:Midi.InputDevice.StartReceiving(Midi.Clock)" nolink="true" /> is called with a <see cref="T:Midi.Clock" />, then each message is assigned a time by querying the clock's <see cref="P:Midi.Clock.Time" /> property. If <see cref="M:Midi.InputDevice.StartReceiving(Midi.Clock)" nolink="true" /> is called with null, then each message is assigned a time based on the number of seconds since <see cref="M:Midi.InputDevice.StartReceiving(Midi.Clock)" nolink="true" /> was called.</para>
</remarks>
<threadsafety static="true" instance="true" />
<seealso cref="T:Midi.Clock" />
<seealso cref="T:Midi.InputDevice" /></documentation>
          <baseType name="DeviceBase" id="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" />
          <property name="InstalledDevices" id="P:Midi.InputDevice.InstalledDevices" access="Public" contract="Static" get="Public" set="false" typeId="T:System.Collections.ObjectModel.ReadOnlyCollection`1" displayName="ReadOnlyCollection{InputDevice}" namespace="System.Collections.ObjectModel" assembly="mscorlib" nullable="false" valueType="false">
            <genericargument name="InputDevice" displayName="InputDevice" namespace="Midi" typeId="T:Midi.InputDevice" assembly="Midi" />
            <documentation><summary> List of input devices installed on this system. </summary></documentation>
          </property>
          <property name="IsOpen" id="P:Midi.InputDevice.IsOpen" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> True if this device has been successfully opened. </summary></documentation>
          </property>
          <property name="IsReceiving" id="P:Midi.InputDevice.IsReceiving" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> True if this device is receiving messages. </summary></documentation>
          </property>
          <property name="Name" id="P:Midi.InputDevice.Name" access="Public" contract="Normal" declaringType="Midi.DeviceBase" declaringAssembly="Midi" declaringId="P:Midi.DeviceBase.Name" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The name of this device. </summary></documentation>
          </property>
          <method name="RemoveAllEventHandlers" displayName="RemoveAllEventHandlers" id="M:Midi.InputDevice.RemoveAllEventHandlers" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Removes all event handlers from the input events on this device. </summary></documentation>
          </method>
          <method name="UpdateInstalledDevices" displayName="UpdateInstalledDevices" id="M:Midi.InputDevice.UpdateInstalledDevices" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Refresh the list of input devices </summary></documentation>
          </method>
          <method name="Open" displayName="Open" id="M:Midi.InputDevice.Open" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Opens this input device. </summary>
<exception cref="T:System.InvalidOperationException">The device is already open.</exception>
<exception cref="T:Midi.DeviceException">The device cannot be opened.</exception>
<remarks>Note that Open() establishes a connection to the device, but no messages will be received until <see cref="M:Midi.InputDevice.StartReceiving(Midi.Clock)" /> is called.</remarks></documentation>
          </method>
          <method name="Close" displayName="Close" id="M:Midi.InputDevice.Close" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Closes this input device. </summary>
<exception cref="T:System.InvalidOperationException">The device is not open or is still receiving.</exception>
<exception cref="T:Midi.DeviceException">The device cannot be closed.</exception></documentation>
          </method>
          <method name="StartReceiving" displayName="StartReceiving" id="M:Midi.InputDevice.StartReceiving(Midi.Clock)" access="Public" contract="Normal" valueType="true" overload="1">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Starts this input device receiving messages. </summary>
<param name="clock">If non-null, the clock's <see cref="P:Midi.Clock.Time" /> property will be used to assign a timestamp to each incoming message. If null, timestamps will be in seconds since StartReceiving() was called.</param>
<param name="handleSysEx">Boolean, when TRUE buffers will be created to enable handling of incoming MIDI Long Messages (SysEx). When FALSE, all long messages are ignored.</param>
<exception cref="T:System.InvalidOperationException">The device is not open or is already receiving. </exception>
<exception cref="T:Midi.DeviceException">The device cannot start receiving.</exception>
<remarks>
  <para>This method launches a background thread to listen for input events, and as events are received, the event handlers are invoked on that background thread. Event handlers should be written to work from a background thread. (For example, if they want to update the GUI, they may need to BeginInvoke to arrange for GUI updates to happen on the correct thread.)</para>
  <para>The background thread which is created by this method is joined (shut down) in <see cref="M:Midi.InputDevice.StopReceiving" />.</para>
</remarks></documentation>
            <parameter name="clock" typeId="T:Midi.Clock" displayName="Clock" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
          </method>
          <method name="StartReceiving" displayName="StartReceiving" id="M:Midi.InputDevice.StartReceiving(Midi.Clock,System.Boolean)" access="Public" contract="Normal" valueType="true" overload="2">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="clock" typeId="T:Midi.Clock" displayName="Clock" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="handleSysEx" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="StopReceiving" displayName="StopReceiving" id="M:Midi.InputDevice.StopReceiving" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Stops this input device from receiving messages. </summary>
<remarks>
  <para>This method waits for all in-progress input event handlers to finish, and then joins (shuts down) the background thread that was created in <see cref="M:Midi.InputDevice.StartReceiving(Midi.Clock)" />. Thus, when this function returns you can be sure that no more event handlers will be invoked.</para>
  <para>It is illegal to call this method from an input event handler (ie, from the background thread), and doing so throws an exception. If an event handler really needs to call this method, consider using BeginInvoke to schedule it on another thread.</para>
</remarks>
<exception cref="T:System.InvalidOperationException">The device is not open; is not receiving; or called from within an event handler (ie, from the background thread).</exception>
<exception cref="T:Midi.DeviceException">The device cannot start receiving.</exception></documentation>
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.InputDevice.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.InputDevice.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.InputDevice.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.InputDevice.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.InputDevice.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.InputDevice.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <event name="NoteOn" id="E:Midi.InputDevice.NoteOn" access="Public" contract="Normal" typeId="T:Midi.InputDevice.NoteOnHandler" valueType="false" multicast="true">
            <documentation><summary> Event called when an input device receives a Note On message. </summary></documentation>
          </event>
          <event name="NoteOff" id="E:Midi.InputDevice.NoteOff" access="Public" contract="Normal" typeId="T:Midi.InputDevice.NoteOffHandler" valueType="false" multicast="true">
            <documentation><summary> Event called when an input device receives a Note Off message. </summary></documentation>
          </event>
          <event name="ControlChange" id="E:Midi.InputDevice.ControlChange" access="Public" contract="Normal" typeId="T:Midi.InputDevice.ControlChangeHandler" valueType="false" multicast="true">
            <documentation><summary> Event called when an input device receives a Control Change message. </summary></documentation>
          </event>
          <event name="ProgramChange" id="E:Midi.InputDevice.ProgramChange" access="Public" contract="Normal" typeId="T:Midi.InputDevice.ProgramChangeHandler" valueType="false" multicast="true">
            <documentation><summary> Event called when an input device receives a Program Change message. </summary></documentation>
          </event>
          <event name="PitchBend" id="E:Midi.InputDevice.PitchBend" access="Public" contract="Normal" typeId="T:Midi.InputDevice.PitchBendHandler" valueType="false" multicast="true">
            <documentation><summary> Event called when an input device receives a Pitch Bend message. </summary></documentation>
          </event>
          <event name="SysEx" id="E:Midi.InputDevice.SysEx" access="Public" contract="Normal" typeId="T:Midi.InputDevice.SysExHandler" valueType="false" multicast="true">
            <documentation><summary> Event called when an input device receives a SysEx message. </summary></documentation>
          </event>
        </class>
        <class name="Message" displayName="Message" namespace="Midi" id="T:Midi.Message" access="Public" abstract="true">
          <documentation><summary> Base class for all MIDI messages. </summary></documentation>
          <derivedBy id="T:Midi.CallbackMessage" displayName="CallbackMessage" namespace="Midi" assembly="Midi" />
          <derivedBy id="T:Midi.DeviceMessage" displayName="DeviceMessage" namespace="Midi" assembly="Midi" />
          <constructor name=".ctor" id="M:Midi.Message.#ctor(System.Single)" access="Family" contract="Normal">
            <documentation><summary> Protected constructor. </summary>
<param name="time">The timestamp for this message.</param></documentation>
            <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Time" id="P:Midi.Message.Time" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Milliseconds since the music started. </summary></documentation>
          </property>
          <method name="SendNow" displayName="SendNow" id="M:Midi.Message.SendNow" access="Public" contract="Abstract" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends this message immediately. </summary></documentation>
          </method>
          <method name="MakeTimeShiftedCopy" displayName="MakeTimeShiftedCopy" id="M:Midi.Message.MakeTimeShiftedCopy(System.Single)" access="Public" contract="Abstract" valueType="false">
            <returnType typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <documentation><summary> Returns a copy of this message, shifted in time by the specified amount. </summary></documentation>
            <parameter name="delta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.Message.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.Message.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.Message.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.Message.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.Message.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.Message.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="DeviceMessage" displayName="DeviceMessage" namespace="Midi" id="T:Midi.DeviceMessage" access="Public" abstract="true">
          <documentation><summary> Base class for messages relevant to a specific device. </summary></documentation>
          <baseType name="Message" id="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" />
          <derivedBy id="T:Midi.ChannelMessage" displayName="ChannelMessage" namespace="Midi" assembly="Midi" />
          <derivedBy id="T:Midi.PercussionMessage" displayName="PercussionMessage" namespace="Midi" assembly="Midi" />
          <derivedBy id="T:Midi.SysExMessage" displayName="SysExMessage" namespace="Midi" assembly="Midi" />
          <constructor name=".ctor" id="M:Midi.DeviceMessage.#ctor(Midi.DeviceBase,System.Single)" access="Family" contract="Normal">
            <documentation><summary> Protected constructor. </summary></documentation>
            <parameter name="device" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Device" id="P:Midi.DeviceMessage.Device" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> The device from which this message originated, or for which it is destined. </summary></documentation>
          </property>
          <property name="Time" id="P:Midi.DeviceMessage.Time" access="Public" contract="Normal" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="P:Midi.Message.Time" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Milliseconds since the music started. </summary></documentation>
          </property>
          <method name="SendNow" displayName="SendNow" id="M:Midi.DeviceMessage.SendNow" access="Public" contract="Abstract" valueType="true" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="M:Midi.Message.SendNow">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends this message immediately. </summary></documentation>
          </method>
          <method name="MakeTimeShiftedCopy" displayName="MakeTimeShiftedCopy" id="M:Midi.DeviceMessage.MakeTimeShiftedCopy(System.Single)" access="Public" contract="Abstract" valueType="false" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="M:Midi.Message.MakeTimeShiftedCopy(System.Single)">
            <returnType typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <documentation><summary> Returns a copy of this message, shifted in time by the specified amount. </summary></documentation>
            <parameter name="delta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.DeviceMessage.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.DeviceMessage.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.DeviceMessage.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.DeviceMessage.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.DeviceMessage.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.DeviceMessage.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="ChannelMessage" displayName="ChannelMessage" namespace="Midi" id="T:Midi.ChannelMessage" access="Public" abstract="true">
          <documentation><summary> Base class for messages relevant to a specific device channel. </summary></documentation>
          <baseType name="DeviceMessage" id="T:Midi.DeviceMessage" displayName="DeviceMessage" namespace="Midi" assembly="Midi">
            <baseType name="Message" id="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" />
          </baseType>
          <derivedBy id="T:Midi.ControlChangeMessage" displayName="ControlChangeMessage" namespace="Midi" assembly="Midi" />
          <derivedBy id="T:Midi.NoteMessage" displayName="NoteMessage" namespace="Midi" assembly="Midi" />
          <derivedBy id="T:Midi.PitchBendMessage" displayName="PitchBendMessage" namespace="Midi" assembly="Midi" />
          <derivedBy id="T:Midi.ProgramChangeMessage" displayName="ProgramChangeMessage" namespace="Midi" assembly="Midi" />
          <constructor name=".ctor" id="M:Midi.ChannelMessage.#ctor(Midi.DeviceBase,Midi.Channel,System.Single)" access="Family" contract="Normal">
            <documentation><summary> Protected constructor. </summary></documentation>
            <parameter name="device" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="channel" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Channel" id="P:Midi.ChannelMessage.Channel" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> Channel. </summary></documentation>
          </property>
          <property name="Device" id="P:Midi.ChannelMessage.Device" access="Public" contract="Normal" declaringType="Midi.DeviceMessage" declaringAssembly="Midi" declaringId="P:Midi.DeviceMessage.Device" get="Public" set="false" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> The device from which this message originated, or for which it is destined. </summary></documentation>
          </property>
          <property name="Time" id="P:Midi.ChannelMessage.Time" access="Public" contract="Normal" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="P:Midi.Message.Time" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Milliseconds since the music started. </summary></documentation>
          </property>
          <method name="SendNow" displayName="SendNow" id="M:Midi.ChannelMessage.SendNow" access="Public" contract="Abstract" valueType="true" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="M:Midi.Message.SendNow">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends this message immediately. </summary></documentation>
          </method>
          <method name="MakeTimeShiftedCopy" displayName="MakeTimeShiftedCopy" id="M:Midi.ChannelMessage.MakeTimeShiftedCopy(System.Single)" access="Public" contract="Abstract" valueType="false" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="M:Midi.Message.MakeTimeShiftedCopy(System.Single)">
            <returnType typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <documentation><summary> Returns a copy of this message, shifted in time by the specified amount. </summary></documentation>
            <parameter name="delta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.ChannelMessage.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.ChannelMessage.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.ChannelMessage.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.ChannelMessage.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.ChannelMessage.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.ChannelMessage.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="NoteMessage" displayName="NoteMessage" namespace="Midi" id="T:Midi.NoteMessage" access="Public" abstract="true">
          <documentation><summary> Base class for messages relevant to a specific note. </summary></documentation>
          <baseType name="ChannelMessage" id="T:Midi.ChannelMessage" displayName="ChannelMessage" namespace="Midi" assembly="Midi">
            <baseType name="DeviceMessage" id="T:Midi.DeviceMessage" displayName="DeviceMessage" namespace="Midi" assembly="Midi">
              <baseType name="Message" id="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" />
            </baseType>
          </baseType>
          <derivedBy id="T:Midi.NoteOffMessage" displayName="NoteOffMessage" namespace="Midi" assembly="Midi" />
          <derivedBy id="T:Midi.NoteOnMessage" displayName="NoteOnMessage" namespace="Midi" assembly="Midi" />
          <derivedBy id="T:Midi.NoteOnOffMessage" displayName="NoteOnOffMessage" namespace="Midi" assembly="Midi" />
          <constructor name=".ctor" id="M:Midi.NoteMessage.#ctor(Midi.DeviceBase,Midi.Channel,Midi.Pitch,System.Int32,System.Single)" access="Family" contract="Normal">
            <documentation><summary> Protected constructor. </summary></documentation>
            <parameter name="device" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="channel" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="pitch" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="velocity" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Pitch" id="P:Midi.NoteMessage.Pitch" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>The pitch for this note message.</summary></documentation>
          </property>
          <property name="Velocity" id="P:Midi.NoteMessage.Velocity" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Velocity, 0..127. </summary></documentation>
          </property>
          <property name="Channel" id="P:Midi.NoteMessage.Channel" access="Public" contract="Normal" declaringType="Midi.ChannelMessage" declaringAssembly="Midi" declaringId="P:Midi.ChannelMessage.Channel" get="Public" set="false" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> Channel. </summary></documentation>
          </property>
          <property name="Device" id="P:Midi.NoteMessage.Device" access="Public" contract="Normal" declaringType="Midi.DeviceMessage" declaringAssembly="Midi" declaringId="P:Midi.DeviceMessage.Device" get="Public" set="false" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> The device from which this message originated, or for which it is destined. </summary></documentation>
          </property>
          <property name="Time" id="P:Midi.NoteMessage.Time" access="Public" contract="Normal" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="P:Midi.Message.Time" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Milliseconds since the music started. </summary></documentation>
          </property>
          <method name="SendNow" displayName="SendNow" id="M:Midi.NoteMessage.SendNow" access="Public" contract="Abstract" valueType="true" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="M:Midi.Message.SendNow">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends this message immediately. </summary></documentation>
          </method>
          <method name="MakeTimeShiftedCopy" displayName="MakeTimeShiftedCopy" id="M:Midi.NoteMessage.MakeTimeShiftedCopy(System.Single)" access="Public" contract="Abstract" valueType="false" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="M:Midi.Message.MakeTimeShiftedCopy(System.Single)">
            <returnType typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <documentation><summary> Returns a copy of this message, shifted in time by the specified amount. </summary></documentation>
            <parameter name="delta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.NoteMessage.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.NoteMessage.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.NoteMessage.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.NoteMessage.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.NoteMessage.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.NoteMessage.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="NoteOnMessage" displayName="NoteOnMessage" namespace="Midi" id="T:Midi.NoteOnMessage" access="Public">
          <documentation><summary> Note On message. </summary></documentation>
          <baseType name="NoteMessage" id="T:Midi.NoteMessage" displayName="NoteMessage" namespace="Midi" assembly="Midi">
            <baseType name="ChannelMessage" id="T:Midi.ChannelMessage" displayName="ChannelMessage" namespace="Midi" assembly="Midi">
              <baseType name="DeviceMessage" id="T:Midi.DeviceMessage" displayName="DeviceMessage" namespace="Midi" assembly="Midi">
                <baseType name="Message" id="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" />
              </baseType>
            </baseType>
          </baseType>
          <constructor name=".ctor" id="M:Midi.NoteOnMessage.#ctor(Midi.DeviceBase,Midi.Channel,Midi.Pitch,System.Int32,System.Single)" access="Public" contract="Normal">
            <documentation><summary> Constructs a Note On message. </summary>
<param name="device">The device associated with this message.</param>
<param name="channel">Channel, 0..15, 10 reserved for percussion.</param>
<param name="pitch">The pitch for this note message.</param>
<param name="velocity">Velocity, 0..127.</param>
<param name="time">The timestamp for this message.</param></documentation>
            <parameter name="device" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="channel" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="pitch" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="velocity" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Pitch" id="P:Midi.NoteOnMessage.Pitch" access="Public" contract="Normal" declaringType="Midi.NoteMessage" declaringAssembly="Midi" declaringId="P:Midi.NoteMessage.Pitch" get="Public" set="false" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>The pitch for this note message.</summary></documentation>
          </property>
          <property name="Velocity" id="P:Midi.NoteOnMessage.Velocity" access="Public" contract="Normal" declaringType="Midi.NoteMessage" declaringAssembly="Midi" declaringId="P:Midi.NoteMessage.Velocity" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Velocity, 0..127. </summary></documentation>
          </property>
          <property name="Channel" id="P:Midi.NoteOnMessage.Channel" access="Public" contract="Normal" declaringType="Midi.ChannelMessage" declaringAssembly="Midi" declaringId="P:Midi.ChannelMessage.Channel" get="Public" set="false" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> Channel. </summary></documentation>
          </property>
          <property name="Device" id="P:Midi.NoteOnMessage.Device" access="Public" contract="Normal" declaringType="Midi.DeviceMessage" declaringAssembly="Midi" declaringId="P:Midi.DeviceMessage.Device" get="Public" set="false" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> The device from which this message originated, or for which it is destined. </summary></documentation>
          </property>
          <property name="Time" id="P:Midi.NoteOnMessage.Time" access="Public" contract="Normal" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="P:Midi.Message.Time" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Milliseconds since the music started. </summary></documentation>
          </property>
          <method name="SendNow" displayName="SendNow" id="M:Midi.NoteOnMessage.SendNow" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends this message immediately. </summary></documentation>
          </method>
          <method name="MakeTimeShiftedCopy" displayName="MakeTimeShiftedCopy" id="M:Midi.NoteOnMessage.MakeTimeShiftedCopy(System.Single)" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <documentation><summary> Returns a copy of this message, shifted in time by the specified amount. </summary></documentation>
            <parameter name="delta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.NoteOnMessage.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.NoteOnMessage.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.NoteOnMessage.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.NoteOnMessage.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.NoteOnMessage.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.NoteOnMessage.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="PercussionMessage" displayName="PercussionMessage" namespace="Midi" id="T:Midi.PercussionMessage" access="Public">
          <documentation><summary> Percussion message. </summary>
<remarks> A percussion message is simply shorthand for sending a Note On message to Channel10 with a percussion-specific note. This message can be sent to an OutputDevice but will be received by an InputDevice as a NoteOn message. </remarks></documentation>
          <baseType name="DeviceMessage" id="T:Midi.DeviceMessage" displayName="DeviceMessage" namespace="Midi" assembly="Midi">
            <baseType name="Message" id="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" />
          </baseType>
          <constructor name=".ctor" id="M:Midi.PercussionMessage.#ctor(Midi.DeviceBase,Midi.Percussion,System.Int32,System.Single)" access="Public" contract="Normal">
            <documentation><summary> Constructs a Percussion message. </summary>
<param name="device">The device associated with this message.</param>
<param name="percussion">Percussion.</param>
<param name="velocity">Velocity, 0..127.</param>
<param name="time">The timestamp for this message.</param></documentation>
            <parameter name="device" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="percussion" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="velocity" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Percussion" id="P:Midi.PercussionMessage.Percussion" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> Percussion. </summary></documentation>
          </property>
          <property name="Velocity" id="P:Midi.PercussionMessage.Velocity" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Velocity, 0..127. </summary></documentation>
          </property>
          <property name="Device" id="P:Midi.PercussionMessage.Device" access="Public" contract="Normal" declaringType="Midi.DeviceMessage" declaringAssembly="Midi" declaringId="P:Midi.DeviceMessage.Device" get="Public" set="false" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> The device from which this message originated, or for which it is destined. </summary></documentation>
          </property>
          <property name="Time" id="P:Midi.PercussionMessage.Time" access="Public" contract="Normal" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="P:Midi.Message.Time" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Milliseconds since the music started. </summary></documentation>
          </property>
          <method name="SendNow" displayName="SendNow" id="M:Midi.PercussionMessage.SendNow" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends this message immediately. </summary></documentation>
          </method>
          <method name="MakeTimeShiftedCopy" displayName="MakeTimeShiftedCopy" id="M:Midi.PercussionMessage.MakeTimeShiftedCopy(System.Single)" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <documentation><summary> Returns a copy of this message, shifted in time by the specified amount. </summary></documentation>
            <parameter name="delta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.PercussionMessage.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.PercussionMessage.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.PercussionMessage.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.PercussionMessage.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.PercussionMessage.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.PercussionMessage.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="NoteOffMessage" displayName="NoteOffMessage" namespace="Midi" id="T:Midi.NoteOffMessage" access="Public">
          <documentation><summary> Note Off message. </summary></documentation>
          <baseType name="NoteMessage" id="T:Midi.NoteMessage" displayName="NoteMessage" namespace="Midi" assembly="Midi">
            <baseType name="ChannelMessage" id="T:Midi.ChannelMessage" displayName="ChannelMessage" namespace="Midi" assembly="Midi">
              <baseType name="DeviceMessage" id="T:Midi.DeviceMessage" displayName="DeviceMessage" namespace="Midi" assembly="Midi">
                <baseType name="Message" id="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" />
              </baseType>
            </baseType>
          </baseType>
          <constructor name=".ctor" id="M:Midi.NoteOffMessage.#ctor(Midi.DeviceBase,Midi.Channel,Midi.Pitch,System.Int32,System.Single)" access="Public" contract="Normal">
            <documentation><summary> Constructs a Note Off message. </summary>
<param name="device">The device associated with this message.</param>
<param name="channel">Channel, 0..15, 10 reserved for percussion.</param>
<param name="pitch">The pitch for this note message.</param>
<param name="velocity">Velocity, 0..127.</param>
<param name="time">The timestamp for this message.</param></documentation>
            <parameter name="device" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="channel" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="pitch" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="velocity" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Pitch" id="P:Midi.NoteOffMessage.Pitch" access="Public" contract="Normal" declaringType="Midi.NoteMessage" declaringAssembly="Midi" declaringId="P:Midi.NoteMessage.Pitch" get="Public" set="false" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>The pitch for this note message.</summary></documentation>
          </property>
          <property name="Velocity" id="P:Midi.NoteOffMessage.Velocity" access="Public" contract="Normal" declaringType="Midi.NoteMessage" declaringAssembly="Midi" declaringId="P:Midi.NoteMessage.Velocity" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Velocity, 0..127. </summary></documentation>
          </property>
          <property name="Channel" id="P:Midi.NoteOffMessage.Channel" access="Public" contract="Normal" declaringType="Midi.ChannelMessage" declaringAssembly="Midi" declaringId="P:Midi.ChannelMessage.Channel" get="Public" set="false" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> Channel. </summary></documentation>
          </property>
          <property name="Device" id="P:Midi.NoteOffMessage.Device" access="Public" contract="Normal" declaringType="Midi.DeviceMessage" declaringAssembly="Midi" declaringId="P:Midi.DeviceMessage.Device" get="Public" set="false" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> The device from which this message originated, or for which it is destined. </summary></documentation>
          </property>
          <property name="Time" id="P:Midi.NoteOffMessage.Time" access="Public" contract="Normal" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="P:Midi.Message.Time" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Milliseconds since the music started. </summary></documentation>
          </property>
          <method name="SendNow" displayName="SendNow" id="M:Midi.NoteOffMessage.SendNow" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends this message immediately. </summary></documentation>
          </method>
          <method name="MakeTimeShiftedCopy" displayName="MakeTimeShiftedCopy" id="M:Midi.NoteOffMessage.MakeTimeShiftedCopy(System.Single)" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <documentation><summary> Returns a copy of this message, shifted in time by the specified amount. </summary></documentation>
            <parameter name="delta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.NoteOffMessage.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.NoteOffMessage.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.NoteOffMessage.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.NoteOffMessage.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.NoteOffMessage.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.NoteOffMessage.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="NoteOnOffMessage" displayName="NoteOnOffMessage" namespace="Midi" id="T:Midi.NoteOnOffMessage" access="Public">
          <documentation><summary> A Note On message which schedules its own Note Off message when played. </summary></documentation>
          <baseType name="NoteMessage" id="T:Midi.NoteMessage" displayName="NoteMessage" namespace="Midi" assembly="Midi">
            <baseType name="ChannelMessage" id="T:Midi.ChannelMessage" displayName="ChannelMessage" namespace="Midi" assembly="Midi">
              <baseType name="DeviceMessage" id="T:Midi.DeviceMessage" displayName="DeviceMessage" namespace="Midi" assembly="Midi">
                <baseType name="Message" id="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" />
              </baseType>
            </baseType>
          </baseType>
          <constructor name=".ctor" id="M:Midi.NoteOnOffMessage.#ctor(Midi.DeviceBase,Midi.Channel,Midi.Pitch,System.Int32,System.Single,Midi.Clock,System.Single)" access="Public" contract="Normal">
            <documentation><summary> Constructs a Note On/Off message. </summary>
<param name="device">The device associated with this message.</param>
<param name="channel">Channel, 0..15, 10 reserved for percussion.</param>
<param name="pitch">The pitch for this note message.</param>
<param name="velocity">Velocity, 0..127.</param>
<param name="time">The timestamp for this message.</param>
<param name="clock">The clock that should schedule the off message.</param>
<param name="duration">Time delay between on message and off messasge.</param></documentation>
            <parameter name="device" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="channel" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="pitch" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="velocity" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="clock" typeId="T:Midi.Clock" displayName="Clock" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="duration" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Clock" id="P:Midi.NoteOnOffMessage.Clock" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.Clock" displayName="Clock" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> The clock used to schedule the follow-up message. </summary></documentation>
          </property>
          <property name="Duration" id="P:Midi.NoteOnOffMessage.Duration" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Time delay between the Note On and the Note Off. </summary></documentation>
          </property>
          <property name="Pitch" id="P:Midi.NoteOnOffMessage.Pitch" access="Public" contract="Normal" declaringType="Midi.NoteMessage" declaringAssembly="Midi" declaringId="P:Midi.NoteMessage.Pitch" get="Public" set="false" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>The pitch for this note message.</summary></documentation>
          </property>
          <property name="Velocity" id="P:Midi.NoteOnOffMessage.Velocity" access="Public" contract="Normal" declaringType="Midi.NoteMessage" declaringAssembly="Midi" declaringId="P:Midi.NoteMessage.Velocity" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Velocity, 0..127. </summary></documentation>
          </property>
          <property name="Channel" id="P:Midi.NoteOnOffMessage.Channel" access="Public" contract="Normal" declaringType="Midi.ChannelMessage" declaringAssembly="Midi" declaringId="P:Midi.ChannelMessage.Channel" get="Public" set="false" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> Channel. </summary></documentation>
          </property>
          <property name="Device" id="P:Midi.NoteOnOffMessage.Device" access="Public" contract="Normal" declaringType="Midi.DeviceMessage" declaringAssembly="Midi" declaringId="P:Midi.DeviceMessage.Device" get="Public" set="false" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> The device from which this message originated, or for which it is destined. </summary></documentation>
          </property>
          <property name="Time" id="P:Midi.NoteOnOffMessage.Time" access="Public" contract="Normal" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="P:Midi.Message.Time" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Milliseconds since the music started. </summary></documentation>
          </property>
          <method name="SendNow" displayName="SendNow" id="M:Midi.NoteOnOffMessage.SendNow" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends this message immediately. </summary></documentation>
          </method>
          <method name="MakeTimeShiftedCopy" displayName="MakeTimeShiftedCopy" id="M:Midi.NoteOnOffMessage.MakeTimeShiftedCopy(System.Single)" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <documentation><summary> Returns a copy of this message, shifted in time by the specified amount. </summary></documentation>
            <parameter name="delta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.NoteOnOffMessage.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.NoteOnOffMessage.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.NoteOnOffMessage.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.NoteOnOffMessage.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.NoteOnOffMessage.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.NoteOnOffMessage.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="ControlChangeMessage" displayName="ControlChangeMessage" namespace="Midi" id="T:Midi.ControlChangeMessage" access="Public">
          <documentation><summary> Control change message. </summary></documentation>
          <baseType name="ChannelMessage" id="T:Midi.ChannelMessage" displayName="ChannelMessage" namespace="Midi" assembly="Midi">
            <baseType name="DeviceMessage" id="T:Midi.DeviceMessage" displayName="DeviceMessage" namespace="Midi" assembly="Midi">
              <baseType name="Message" id="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" />
            </baseType>
          </baseType>
          <constructor name=".ctor" id="M:Midi.ControlChangeMessage.#ctor(Midi.DeviceBase,Midi.Channel,Midi.Control,System.Int32,System.Single)" access="Public" contract="Normal">
            <documentation><summary> Construts a Control Change message. </summary>
<param name="device">The device associated with this message.</param>
<param name="channel">Channel, 0..15, 10 reserved for percussion.</param>
<param name="control">Control, 0..119</param>
<param name="value">Value, 0..127.</param>
<param name="time">The timestamp for this message.</param></documentation>
            <parameter name="device" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="channel" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="control" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="value" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Control" id="P:Midi.ControlChangeMessage.Control" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> The control for this message. </summary></documentation>
          </property>
          <property name="Value" id="P:Midi.ControlChangeMessage.Value" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Value, 0..127. </summary></documentation>
          </property>
          <property name="Channel" id="P:Midi.ControlChangeMessage.Channel" access="Public" contract="Normal" declaringType="Midi.ChannelMessage" declaringAssembly="Midi" declaringId="P:Midi.ChannelMessage.Channel" get="Public" set="false" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> Channel. </summary></documentation>
          </property>
          <property name="Device" id="P:Midi.ControlChangeMessage.Device" access="Public" contract="Normal" declaringType="Midi.DeviceMessage" declaringAssembly="Midi" declaringId="P:Midi.DeviceMessage.Device" get="Public" set="false" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> The device from which this message originated, or for which it is destined. </summary></documentation>
          </property>
          <property name="Time" id="P:Midi.ControlChangeMessage.Time" access="Public" contract="Normal" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="P:Midi.Message.Time" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Milliseconds since the music started. </summary></documentation>
          </property>
          <method name="SendNow" displayName="SendNow" id="M:Midi.ControlChangeMessage.SendNow" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends this message immediately. </summary></documentation>
          </method>
          <method name="MakeTimeShiftedCopy" displayName="MakeTimeShiftedCopy" id="M:Midi.ControlChangeMessage.MakeTimeShiftedCopy(System.Single)" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <documentation><summary> Returns a copy of this message, shifted in time by the specified amount. </summary></documentation>
            <parameter name="delta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.ControlChangeMessage.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.ControlChangeMessage.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.ControlChangeMessage.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.ControlChangeMessage.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.ControlChangeMessage.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.ControlChangeMessage.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="PitchBendMessage" displayName="PitchBendMessage" namespace="Midi" id="T:Midi.PitchBendMessage" access="Public">
          <documentation><summary> Pitch Bend message. </summary></documentation>
          <baseType name="ChannelMessage" id="T:Midi.ChannelMessage" displayName="ChannelMessage" namespace="Midi" assembly="Midi">
            <baseType name="DeviceMessage" id="T:Midi.DeviceMessage" displayName="DeviceMessage" namespace="Midi" assembly="Midi">
              <baseType name="Message" id="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" />
            </baseType>
          </baseType>
          <constructor name=".ctor" id="M:Midi.PitchBendMessage.#ctor(Midi.DeviceBase,Midi.Channel,System.Int32,System.Single)" access="Public" contract="Normal">
            <documentation><summary> Constructs a Pitch Bend message. </summary>
<param name="device">The device associated with this message.</param>
<param name="channel">Channel, 0..15, 10 reserved for percussion.</param>
<param name="value">Pitch bend value, 0..16383, 8192 is centered.</param>
<param name="time">The timestamp for this message.</param></documentation>
            <parameter name="device" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="channel" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="value" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Value" id="P:Midi.PitchBendMessage.Value" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Pitch bend value, 0..16383, 8192 is centered. </summary></documentation>
          </property>
          <property name="Channel" id="P:Midi.PitchBendMessage.Channel" access="Public" contract="Normal" declaringType="Midi.ChannelMessage" declaringAssembly="Midi" declaringId="P:Midi.ChannelMessage.Channel" get="Public" set="false" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> Channel. </summary></documentation>
          </property>
          <property name="Device" id="P:Midi.PitchBendMessage.Device" access="Public" contract="Normal" declaringType="Midi.DeviceMessage" declaringAssembly="Midi" declaringId="P:Midi.DeviceMessage.Device" get="Public" set="false" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> The device from which this message originated, or for which it is destined. </summary></documentation>
          </property>
          <property name="Time" id="P:Midi.PitchBendMessage.Time" access="Public" contract="Normal" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="P:Midi.Message.Time" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Milliseconds since the music started. </summary></documentation>
          </property>
          <method name="SendNow" displayName="SendNow" id="M:Midi.PitchBendMessage.SendNow" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends this message immediately. </summary></documentation>
          </method>
          <method name="MakeTimeShiftedCopy" displayName="MakeTimeShiftedCopy" id="M:Midi.PitchBendMessage.MakeTimeShiftedCopy(System.Single)" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <documentation><summary> Returns a copy of this message, shifted in time by the specified amount. </summary></documentation>
            <parameter name="delta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.PitchBendMessage.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.PitchBendMessage.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.PitchBendMessage.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.PitchBendMessage.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.PitchBendMessage.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.PitchBendMessage.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="ProgramChangeMessage" displayName="ProgramChangeMessage" namespace="Midi" id="T:Midi.ProgramChangeMessage" access="Public">
          <documentation><summary> Program Change message. </summary></documentation>
          <baseType name="ChannelMessage" id="T:Midi.ChannelMessage" displayName="ChannelMessage" namespace="Midi" assembly="Midi">
            <baseType name="DeviceMessage" id="T:Midi.DeviceMessage" displayName="DeviceMessage" namespace="Midi" assembly="Midi">
              <baseType name="Message" id="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" />
            </baseType>
          </baseType>
          <constructor name=".ctor" id="M:Midi.ProgramChangeMessage.#ctor(Midi.DeviceBase,Midi.Channel,Midi.Instrument,System.Single)" access="Public" contract="Normal">
            <documentation><summary> Constructs a Program Change message. </summary>
<param name="device">The device associated with this message.</param>
<param name="channel">Channel.</param>
<param name="instrument">Instrument.</param>
<param name="time">The timestamp for this message.</param></documentation>
            <parameter name="device" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="channel" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="instrument" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Instrument" id="P:Midi.ProgramChangeMessage.Instrument" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> Instrument. </summary></documentation>
          </property>
          <property name="Channel" id="P:Midi.ProgramChangeMessage.Channel" access="Public" contract="Normal" declaringType="Midi.ChannelMessage" declaringAssembly="Midi" declaringId="P:Midi.ChannelMessage.Channel" get="Public" set="false" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> Channel. </summary></documentation>
          </property>
          <property name="Device" id="P:Midi.ProgramChangeMessage.Device" access="Public" contract="Normal" declaringType="Midi.DeviceMessage" declaringAssembly="Midi" declaringId="P:Midi.DeviceMessage.Device" get="Public" set="false" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> The device from which this message originated, or for which it is destined. </summary></documentation>
          </property>
          <property name="Time" id="P:Midi.ProgramChangeMessage.Time" access="Public" contract="Normal" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="P:Midi.Message.Time" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Milliseconds since the music started. </summary></documentation>
          </property>
          <method name="SendNow" displayName="SendNow" id="M:Midi.ProgramChangeMessage.SendNow" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends this message immediately. </summary></documentation>
          </method>
          <method name="MakeTimeShiftedCopy" displayName="MakeTimeShiftedCopy" id="M:Midi.ProgramChangeMessage.MakeTimeShiftedCopy(System.Single)" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <documentation><summary> Returns a copy of this message, shifted in time by the specified amount. </summary></documentation>
            <parameter name="delta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.ProgramChangeMessage.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.ProgramChangeMessage.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.ProgramChangeMessage.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.ProgramChangeMessage.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.ProgramChangeMessage.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.ProgramChangeMessage.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="CallbackMessage" displayName="CallbackMessage" namespace="Midi" id="T:Midi.CallbackMessage" access="Public">
          <documentation><summary> Pseudo-MIDI message used to arrange for a callback at a certain time. </summary>
<remarks>
  <para>This message can be scheduled with <see cref="M:Midi.Clock.Schedule(Midi.Message)"> Clock.Schedule</see> just like any other message. When its time comes and it gets "sent", it invokes the callback provided in the constructor.</para>
  <para>The idea is that you can embed callback points into the music you've scheduled, so that (if the clock gets to that point in the music) your code has an opportunity for some additional processing.</para>
  <para>The callback is invoked on the MidiOutputDevice's worker thread.</para>
</remarks></documentation>
          <baseType name="Message" id="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" />
          <constructor name=".ctor" id="M:Midi.CallbackMessage.#ctor(Midi.CallbackMessage.CallbackType,System.Single)" access="Public" contract="Normal">
            <documentation><summary> Constructs a Callback message. </summary>
<param name="callback">The callback to invoke when this message is "sent".</param>
<param name="time">The timestamp for this message.</param></documentation>
            <parameter name="callback" typeId="T:Midi.CallbackMessage.CallbackType" displayName="CallbackMessage.CallbackType" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Callback" id="P:Midi.CallbackMessage.Callback" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.CallbackMessage.CallbackType" displayName="CallbackMessage.CallbackType" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> The callback to invoke when this message is "sent". </summary></documentation>
          </property>
          <property name="Time" id="P:Midi.CallbackMessage.Time" access="Public" contract="Normal" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="P:Midi.Message.Time" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Milliseconds since the music started. </summary></documentation>
          </property>
          <method name="SendNow" displayName="SendNow" id="M:Midi.CallbackMessage.SendNow" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends this message immediately, ignoring the beatTime. </summary></documentation>
          </method>
          <method name="MakeTimeShiftedCopy" displayName="MakeTimeShiftedCopy" id="M:Midi.CallbackMessage.MakeTimeShiftedCopy(System.Single)" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <documentation><summary> Returns a copy of this message, shifted in time by the specified amount. </summary></documentation>
            <parameter name="delta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.CallbackMessage.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.CallbackMessage.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.CallbackMessage.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.CallbackMessage.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.CallbackMessage.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.CallbackMessage.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="SysExMessage" displayName="SysExMessage" namespace="Midi" id="T:Midi.SysExMessage" access="Public">
          <documentation><summary> SysEx message </summary></documentation>
          <baseType name="DeviceMessage" id="T:Midi.DeviceMessage" displayName="DeviceMessage" namespace="Midi" assembly="Midi">
            <baseType name="Message" id="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" />
          </baseType>
          <constructor name=".ctor" id="M:Midi.SysExMessage.#ctor(Midi.DeviceBase,System.Byte[],System.Single)" access="Public" contract="Normal">
            <documentation><summary> Protected constructor. </summary></documentation>
            <parameter name="device" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="data" typeId="T:System.Byte" displayName="Byte" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
            </parameter>
            <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <property name="Data" id="P:Midi.SysExMessage.Data" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Byte" displayName="Byte" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <array rank="1" />
            <documentation><summary> Data. </summary></documentation>
          </property>
          <property name="Device" id="P:Midi.SysExMessage.Device" access="Public" contract="Normal" declaringType="Midi.DeviceMessage" declaringAssembly="Midi" declaringId="P:Midi.DeviceMessage.Device" get="Public" set="false" typeId="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> The device from which this message originated, or for which it is destined. </summary></documentation>
          </property>
          <property name="Time" id="P:Midi.SysExMessage.Time" access="Public" contract="Normal" declaringType="Midi.Message" declaringAssembly="Midi" declaringId="P:Midi.Message.Time" get="Public" set="false" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> Milliseconds since the music started. </summary></documentation>
          </property>
          <method name="SendNow" displayName="SendNow" id="M:Midi.SysExMessage.SendNow" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends this message immediately. </summary></documentation>
          </method>
          <method name="MakeTimeShiftedCopy" displayName="MakeTimeShiftedCopy" id="M:Midi.SysExMessage.MakeTimeShiftedCopy(System.Single)" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:Midi.Message" displayName="Message" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <documentation><summary> Returns a copy of this message, shifted in time by the specified amount. </summary></documentation>
            <parameter name="delta" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.SysExMessage.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.SysExMessage.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.SysExMessage.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.SysExMessage.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.SysExMessage.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.SysExMessage.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="OutputDevice" displayName="OutputDevice" namespace="Midi" id="T:Midi.OutputDevice" access="Public">
          <documentation><summary> A MIDI output device. </summary>
<remarks>
  <para>Each instance of this class describes a MIDI output device installed on the system. You cannot create your own instances, but instead must go through the <see cref="P:Midi.OutputDevice.InstalledDevices" /> property to find which devices are available. You may wish to examine the <see cref="P:Midi.DeviceBase.Name" /> property of each one and present the user with a choice of which device to use. </para>
  <para>Open an output device with <see cref="M:Midi.OutputDevice.Open" /> and close it with <see cref="M:Midi.OutputDevice.Close" />. While it is open, you may send MIDI messages with functions such as <see cref="M:Midi.OutputDevice.SendNoteOn(Midi.Channel,Midi.Pitch,System.Int32)" />, <see cref="M:Midi.OutputDevice.SendNoteOff(Midi.Channel,Midi.Pitch,System.Int32)" /> and <see cref="M:Midi.OutputDevice.SendProgramChange(Midi.Channel,Midi.Instrument)" />. All notes may be silenced on the device by calling <see cref="M:Midi.OutputDevice.SilenceAllNotes" />.</para>
  <para>Note that the above methods send their messages immediately. If you wish to arrange for a message to be sent at a specific future time, you'll need to instantiate some subclass of <see cref="T:Midi.Message" /> (eg <see cref="T:Midi.NoteOnMessage" />) and then pass it to <see cref="M:Midi.Clock.Schedule(Midi.Message)">Clock.Schedule</see>. </para>
</remarks>
<threadsafety static="true" instance="true" />
<seealso cref="T:Midi.Clock" />
<seealso cref="T:Midi.InputDevice" /></documentation>
          <baseType name="DeviceBase" id="T:Midi.DeviceBase" displayName="DeviceBase" namespace="Midi" assembly="Midi" />
          <property name="InstalledDevices" id="P:Midi.OutputDevice.InstalledDevices" access="Public" contract="Static" get="Public" set="false" typeId="T:System.Collections.ObjectModel.ReadOnlyCollection`1" displayName="ReadOnlyCollection{OutputDevice}" namespace="System.Collections.ObjectModel" assembly="mscorlib" nullable="false" valueType="false">
            <genericargument name="OutputDevice" displayName="OutputDevice" namespace="Midi" typeId="T:Midi.OutputDevice" assembly="Midi" />
            <documentation><summary> List of devices installed on this system. </summary></documentation>
          </property>
          <property name="IsOpen" id="P:Midi.OutputDevice.IsOpen" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary> True if this device is open. </summary></documentation>
          </property>
          <property name="Name" id="P:Midi.OutputDevice.Name" access="Public" contract="Normal" declaringType="Midi.DeviceBase" declaringAssembly="Midi" declaringId="P:Midi.DeviceBase.Name" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The name of this device. </summary></documentation>
          </property>
          <method name="UpdateInstalledDevices" displayName="UpdateInstalledDevices" id="M:Midi.OutputDevice.UpdateInstalledDevices" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Refresh the list of input devices </summary></documentation>
          </method>
          <method name="Open" displayName="Open" id="M:Midi.OutputDevice.Open" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Opens this output device. </summary>
<exception cref="T:System.InvalidOperationException">The device is already open.</exception>
<exception cref="T:Midi.DeviceException">The device cannot be opened.</exception></documentation>
          </method>
          <method name="Close" displayName="Close" id="M:Midi.OutputDevice.Close" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Closes this output device. </summary>
<exception cref="T:System.InvalidOperationException">The device is not open.</exception>
<exception cref="T:Midi.DeviceException">The device cannot be closed.</exception></documentation>
          </method>
          <method name="SilenceAllNotes" displayName="SilenceAllNotes" id="M:Midi.OutputDevice.SilenceAllNotes" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Silences all notes on this output device. </summary>
<exception cref="T:System.InvalidOperationException">The device is not open.</exception>
<exception cref="T:Midi.DeviceException">The message cannot be sent.</exception></documentation>
          </method>
          <method name="SendNoteOn" displayName="SendNoteOn" id="M:Midi.OutputDevice.SendNoteOn(Midi.Channel,Midi.Pitch,System.Int32)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends a Note On message to this MIDI output device. </summary>
<param name="channel">The channel.</param>
<param name="pitch">The pitch.</param>
<param name="velocity">The velocity 0..127.</param>
<exception cref="T:System.ArgumentOutOfRangeException">channel, pitch, or velocity is out-of-range.</exception>
<exception cref="T:System.InvalidOperationException">The device is not open.</exception>
<exception cref="T:Midi.DeviceException">The message cannot be sent.</exception></documentation>
            <parameter name="channel" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="pitch" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="velocity" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="SendNoteOff" displayName="SendNoteOff" id="M:Midi.OutputDevice.SendNoteOff(Midi.Channel,Midi.Pitch,System.Int32)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends a Note Off message to this MIDI output device. </summary>
<param name="channel">The channel.</param>
<param name="pitch">The pitch.</param>
<param name="velocity">The velocity 0..127.</param>
<exception cref="T:System.ArgumentOutOfRangeException">channel, note, or velocity is out-of-range.</exception>
<exception cref="T:System.InvalidOperationException">The device is not open.</exception>
<exception cref="T:Midi.DeviceException">The message cannot be sent.</exception></documentation>
            <parameter name="channel" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="pitch" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="velocity" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="SendPercussion" displayName="SendPercussion" id="M:Midi.OutputDevice.SendPercussion(Midi.Percussion,System.Int32)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends a Note On message to Channel10 of this MIDI output device. </summary>
<param name="percussion">The percussion.</param>
<param name="velocity">The velocity 0..127.</param>
<remarks>This is simply shorthand for a Note On message on Channel10 with a percussion-specific note, so there is no corresponding message to receive from an input device.</remarks>
<exception cref="T:System.ArgumentOutOfRangeException">percussion or velocity is out-of-range. </exception>
<exception cref="T:System.InvalidOperationException">The device is not open.</exception>
<exception cref="T:Midi.DeviceException">The message cannot be sent.</exception></documentation>
            <parameter name="percussion" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="velocity" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="SendControlChange" displayName="SendControlChange" id="M:Midi.OutputDevice.SendControlChange(Midi.Channel,Midi.Control,System.Int32)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends a Control Change message to this MIDI output device. </summary>
<param name="channel">The channel.</param>
<param name="control">The control.</param>
<param name="value">The new value 0..127.</param>
<exception cref="T:System.ArgumentOutOfRangeException">channel, control, or value is out-of-range.</exception>
<exception cref="T:System.InvalidOperationException">The device is not open.</exception>
<exception cref="T:Midi.DeviceException">The message cannot be sent.</exception></documentation>
            <parameter name="channel" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="control" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="value" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="SendPitchBend" displayName="SendPitchBend" id="M:Midi.OutputDevice.SendPitchBend(Midi.Channel,System.Int32)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends a Pitch Bend message to this MIDI output device. </summary>
<param name="channel">The channel.</param>
<param name="value">The pitch bend value, 0..16383, 8192 is centered.</param>
<exception cref="T:System.ArgumentOutOfRangeException">channel or value is out-of-range. </exception>
<exception cref="T:System.InvalidOperationException">The device is not open.</exception>
<exception cref="T:Midi.DeviceException">The message cannot be sent.</exception></documentation>
            <parameter name="channel" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="value" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="SendProgramChange" displayName="SendProgramChange" id="M:Midi.OutputDevice.SendProgramChange(Midi.Channel,Midi.Instrument)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends a Program Change message to this MIDI output device. </summary>
<param name="channel">The channel.</param>
<param name="instrument">The instrument.</param>
<exception cref="T:System.ArgumentOutOfRangeException">channel or instrument is out-of-range. </exception>
<exception cref="T:System.InvalidOperationException">The device is not open.</exception>
<exception cref="T:Midi.DeviceException">The message cannot be sent.</exception>
<remarks> A Program Change message is used to switch among instrument settings, generally instrument voices. An instrument conforming to General Midi 1 will have the instruments described in the <see cref="T:Midi.Instrument" /> enum; other instruments may have different instrument sets. </remarks></documentation>
            <parameter name="channel" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="instrument" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="SendSysEx" displayName="SendSysEx" id="M:Midi.OutputDevice.SendSysEx(System.Byte[])" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Sends a System Exclusive (sysex) message to this MIDI output device. </summary>
<param name="data">The message to send (as byte array)</param>
<exception cref="T:Midi.DeviceException">The message cannot be sent.</exception></documentation>
            <parameter name="data" typeId="T:System.Byte" displayName="Byte" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
            </parameter>
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.OutputDevice.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.OutputDevice.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.OutputDevice.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.OutputDevice.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.OutputDevice.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.OutputDevice.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="PitchExtensionMethods" displayName="PitchExtensionMethods" namespace="Midi" id="T:Midi.PitchExtensionMethods" access="Public" static="true">
          <documentation><summary> Extension methods for the Pitch enum. </summary></documentation>
          <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
          <method name="IsInMidiRange" displayName="IsInMidiRange" id="M:Midi.PitchExtensionMethods.IsInMidiRange(Midi.Pitch)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Returns true if pitch is in the MIDI range [1..127]. </summary>
<param name="pitch">The pitch to test.</param>
<returns>True if the pitch is in [0..127].</returns></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="pitch" extension="true" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="Octave" displayName="Octave" id="M:Midi.PitchExtensionMethods.Octave(Midi.Pitch)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Returns the octave containing this pitch. </summary>
<param name="pitch">The pitch.</param>
<returns>The octave, where octaves begin at each C, and Middle C is the first pitch in octave 4.</returns></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="pitch" extension="true" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="PositionInOctave" displayName="PositionInOctave" id="M:Midi.PitchExtensionMethods.PositionInOctave(Midi.Pitch)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Returns the position of this pitch in its octave. </summary>
<param name="pitch">The pitch.</param>
<returns>The pitch's position in its octave, where octaves start at each C, so C's position is 0, C#'s position is 1, etc.</returns></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="pitch" extension="true" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="NotePreferringSharps" displayName="NotePreferringSharps" id="M:Midi.PitchExtensionMethods.NotePreferringSharps(Midi.Pitch)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <documentation><summary> Returns the simplest note that resolves to this pitch, preferring sharps where needed. </summary>
<param name="pitch">The pitch.</param>
<returns>The simplest note for that pitch. If that pitch is a "white key", the note is simply a letter with no accidentals (and is the same as <see cref="M:Midi.PitchExtensionMethods.NotePreferringFlats(Midi.Pitch)" />). Otherwise the note has a sharp.</returns></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="pitch" extension="true" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="NotePreferringFlats" displayName="NotePreferringFlats" id="M:Midi.PitchExtensionMethods.NotePreferringFlats(Midi.Pitch)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <documentation><summary> Returns the simplest note that resolves to this pitch, preferring flats where needed. </summary>
<param name="pitch">The pitch.</param>
<returns>The simplest note for that pitch. If that pitch is a "white key", the note is simply a letter with no accidentals (and is the same as <see cref="M:Midi.PitchExtensionMethods.NotePreferringSharps(Midi.Pitch)" />). Otherwise the note has a flat.</returns></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="pitch" extension="true" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="NoteWithLetter" displayName="NoteWithLetter" id="M:Midi.PitchExtensionMethods.NoteWithLetter(Midi.Pitch,System.Char)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <documentation><summary> Returns the note that would name this pitch if it used the given letter. </summary>
<param name="pitch">The pitch being named.</param>
<param name="letter">The letter to use in the name, in ['A'..'G'].</param>
<returns>The note for pitch with letter. The result may have a large number of accidentals if pitch is not easily named by letter.</returns>
<exception cref="T:System.ArgumentOutOfRangeException">letter is out of range.</exception></documentation>
            <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
            <parameter name="pitch" extension="true" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="letter" extension="true" typeId="T:System.Char" displayName="Char" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.PitchExtensionMethods.ToString" access="Public" contract="Virtual" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.ToString">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.PitchExtensionMethods.Equals(System.Object)" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Equals(System.Object)">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.PitchExtensionMethods.GetHashCode" access="Public" contract="Virtual" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetHashCode">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.PitchExtensionMethods.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.PitchExtensionMethods.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.PitchExtensionMethods.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
        </class>
        <class name="ScalePattern" displayName="ScalePattern" namespace="Midi" id="T:Midi.ScalePattern" access="Public">
          <documentation><summary> Description of a scale's pattern as it ascends through an octave. </summary>
<remarks> This class describes the general behavior of a scale as it ascends from a tonic up to the next tonic. It is described in terms of semitones relative to the tonic; to apply it to a particular tonic, pass one of these to the constructor of <see cref="T:Midi.Scale" />. </remarks></documentation>
          <constructor name=".ctor" id="M:Midi.ScalePattern.#ctor(System.String,System.Int32[])" access="Public" contract="Normal">
            <documentation><summary> Constructs a scale pattern. </summary>
<param name="name">The name of the scale pattern.</param>
<param name="ascent">The ascending pattern of the scale. See the <see cref="P:Midi.ScalePattern.Ascent" /> property for a detailed description and requirements. This parameter is copied.</param>
<exception cref="T:System.ArgumentNullException">name or ascent is null.</exception>
<exception cref="T:System.ArgumentException">ascent is invalid.</exception></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="ascent" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
              <array rank="1" />
            </parameter>
          </constructor>
          <property name="Name" id="P:Midi.ScalePattern.Name" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary>The name of the scale being described.</summary></documentation>
          </property>
          <property name="Ascent" id="P:Midi.ScalePattern.Ascent" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <array rank="1" />
            <documentation><summary>The ascent of the scale.</summary>
<remarks>
  <para>The ascent is expressed as a series of integers, each giving a semitone distance above the tonic. It must have at least two elements, start at zero (the tonic), be monotonically increasing, and stay below 12 (the next tonic above).</para>
  <para>The number of elements in the ascent tells us how many notes-per-octave in the scale. For example, a heptatonic scale will always have seven elements in the ascent. </para>
</remarks></documentation>
          </property>
          <method name="ToString" displayName="ToString" id="M:Midi.ScalePattern.ToString" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> ToString returns the pattern name. </summary>
<returns>The pattern's name, such as "Major" or "Melodic Minor (ascending)".</returns></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.ScalePattern.Equals(System.Object)" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Value equality. </summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.ScalePattern.GetHashCode" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Hash code. </summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.ScalePattern.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.ScalePattern.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.ScalePattern.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <operator name="op_Equality" id="M:Midi.ScalePattern.op_Equality(Midi.ScalePattern,Midi.ScalePattern)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Equality operator does value equality. </summary></documentation>
            <parameter name="a" typeId="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="b" typeId="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
          </operator>
          <operator name="op_Inequality" id="M:Midi.ScalePattern.op_Inequality(Midi.ScalePattern,Midi.ScalePattern)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Inequality operator does value inequality. </summary></documentation>
            <parameter name="a" typeId="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="b" typeId="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
          </operator>
        </class>
        <class name="Scale" displayName="Scale" namespace="Midi" id="T:Midi.Scale" access="Public">
          <documentation><summary> A scale based on a pattern and a tonic note. </summary>
<remarks>
  <para>For our purposes, a scale is defined by a tonic and then the pattern that it uses to ascend up to the next tonic. The tonic is described with a <see cref="T:Midi.Note" /> because it is not specific to any one octave. The ascending pattern is provided by the <see cref="T:Midi.ScalePattern" /> class. </para>
  <para>This class comes with a collection of predefined patterns, such as <see cref="F:Midi.Scale.Major" /> and <see cref="F:Midi.Scale.HarmonicMinor" />.</para>
</remarks></documentation>
          <constructor name=".ctor" id="M:Midi.Scale.#ctor(Midi.Note,Midi.ScalePattern)" access="Public" contract="Normal">
            <documentation><summary> Constructs a scale from its tonic and its pattern. </summary>
<param name="tonic">The tonic note.</param>
<param name="pattern">The scale pattern.</param>
<exception cref="T:System.ArgumentNullException">tonic or pattern is null.</exception></documentation>
            <parameter name="tonic" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="pattern" typeId="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
          </constructor>
          <field name="Major" id="F:Midi.Scale.Major" access="Public" contract="Static" typeId="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> Pattern for Major scales. </summary></documentation>
          </field>
          <field name="NaturalMinor" id="F:Midi.Scale.NaturalMinor" access="Public" contract="Static" typeId="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> Pattern for Natural Minor scales. </summary></documentation>
          </field>
          <field name="HarmonicMinor" id="F:Midi.Scale.HarmonicMinor" access="Public" contract="Static" typeId="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> Pattern for Harmonic Minor scales. </summary></documentation>
          </field>
          <field name="MelodicMinorAscending" id="F:Midi.Scale.MelodicMinorAscending" access="Public" contract="Static" typeId="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> Pattern for Melodic Minor scale as it ascends. </summary></documentation>
          </field>
          <field name="MelodicMinorDescending" id="F:Midi.Scale.MelodicMinorDescending" access="Public" contract="Static" typeId="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> Pattern for Melodic Minor scale as it descends. </summary></documentation>
          </field>
          <field name="Chromatic" id="F:Midi.Scale.Chromatic" access="Public" contract="Static" typeId="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary> Pattern for Chromatic scales. </summary></documentation>
          </field>
          <field name="Patterns" id="F:Midi.Scale.Patterns" access="Public" contract="Static" typeId="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <array rank="1" />
            <documentation><summary> Array of all the built-in scale patterns. </summary></documentation>
          </field>
          <property name="Name" id="P:Midi.Scale.Name" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false">
            <documentation><summary> The scale's human-readable name, such as "G# Major" or "Eb Melodic Minor (ascending)". </summary></documentation>
          </property>
          <property name="Tonic" id="P:Midi.Scale.Tonic" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>The tonic of this scale.</summary></documentation>
          </property>
          <property name="Pattern" id="P:Midi.Scale.Pattern" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.ScalePattern" displayName="ScalePattern" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <documentation><summary>The pattern of this scale.</summary></documentation>
          </property>
          <property name="NoteSequence" id="P:Midi.Scale.NoteSequence" access="Public" contract="Normal" get="Public" set="false" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="false">
            <array rank="1" />
            <documentation><summary> The sequence of notes in this scale. </summary>
<remarks>
  <para>This sequence begins at the tonic and ascends, stopping before the next tonic. </para>
</remarks></documentation>
          </property>
          <method name="Contains" displayName="Contains" id="M:Midi.Scale.Contains(Midi.Pitch)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Returns true if pitch is in this scale. </summary>
<param name="pitch">The pitch to test.</param>
<returns>True if pitch is in this scale.</returns></documentation>
            <parameter name="pitch" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="ScaleDegree" displayName="ScaleDegree" id="M:Midi.Scale.ScaleDegree(Midi.Pitch)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Returns the scale degree of the given pitch in this scale. </summary>
<param name="pitch">The pitch to test.</param>
<returns>The scale degree of pitch in this scale, where 1 is the tonic. Returns -1 if pitch is not in this scale.</returns></documentation>
            <parameter name="pitch" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="ToString" displayName="ToString" id="M:Midi.Scale.ToString" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> ToString returns the scale's human-readable name. </summary>
<returns>The scale's name, such as "G# Major" or "Eb Melodic Minor (ascending)". </returns></documentation>
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.Scale.Equals(System.Object)" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Value equality. </summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.Scale.GetHashCode" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Hash code. </summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.Scale.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.Scale.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.Scale.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <operator name="op_Equality" id="M:Midi.Scale.op_Equality(Midi.Scale,Midi.Scale)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Equality operator does value equality because Scale is immutable. </summary></documentation>
            <parameter name="a" typeId="T:Midi.Scale" displayName="Scale" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="b" typeId="T:Midi.Scale" displayName="Scale" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
          </operator>
          <operator name="op_Inequality" id="M:Midi.Scale.op_Inequality(Midi.Scale,Midi.Scale)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Inequality operator does value inequality because Chord is immutable. </summary></documentation>
            <parameter name="a" typeId="T:Midi.Scale" displayName="Scale" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
            <parameter name="b" typeId="T:Midi.Scale" displayName="Scale" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
          </operator>
        </class>
        <structure name="Note" displayName="Note" namespace="Midi" id="T:Midi.Note" access="Public">
          <documentation><summary> A letter and accidental, which together form an octave-independent note. </summary>
<remarks>
  <para>This class lets you define a note by combining a letters A-G with accidentals (sharps and flats). Examples of notes are D, B#, and Gbb. This is the conventional way to refer to notes in an octave independent way.</para>
  <para>Each note unambiguously identifies a pitch (modulo octave), but each pitch has potentially many notes. For example, the notes F, E#, D###, and Gbb all resolve to the same pitch, though the last two names are unlikely to be used in practice.</para>
</remarks></documentation>
          <constructor name=".ctor" id="M:Midi.Note.#ctor(System.Char)" access="Public" contract="Normal" overload="1">
            <documentation><summary> Constructs a note from a letter. </summary>
<param name="letter">The letter, which must be in ['A'..'G'].</param>
<exception cref="T:System.ArgumentOutOfRangeException">letter is out of range.</exception></documentation>
            <parameter name="letter" typeId="T:System.Char" displayName="Char" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <constructor name=".ctor" id="M:Midi.Note.#ctor(System.String)" access="Public" contract="Normal" overload="2">
            <documentation><summary> Constructs a note from a string. </summary>
<param name="name">The name to parse. Must begin with a letter in ['A'..'G'], then optionally be followed by a series of '#' (sharps) or a series of 'b' (flats). </param>
<exception cref="T:System.ArgumentNullException">name is null.</exception>
<exception cref="T:System.ArgumentException">name cannot be parsed.</exception></documentation>
            <parameter name="name" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </constructor>
          <constructor name=".ctor" id="M:Midi.Note.#ctor(System.Char,System.Int32)" access="Public" contract="Normal" overload="3">
            <documentation><summary> Constructs a note name from a letter and accidental. </summary>
<param name="letter">The letter, which must be in ['A'..'G'].</param>
<param name="accidental">The accidental. Zero means natural, positive values are sharp by that many semitones, and negative values are flat by that many semitones. Likely values are <see cref="F:Midi.Note.Natural" /> (0), <see cref="F:Midi.Note.Sharp" /> (1), <see cref="F:Midi.Note.DoubleSharp" /> (2), <see cref="F:Midi.Note.Flat" /> (-1), and <see cref="F:Midi.Note.DoubleFlat" /> (-2).</param>
<exception cref="T:System.ArgumentOutOfRangeException">letter is out of range.</exception></documentation>
            <parameter name="letter" typeId="T:System.Char" displayName="Char" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <parameter name="accidental" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </constructor>
          <field name="DoubleFlat" id="F:Midi.Note.DoubleFlat" access="Public" contract="Static" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary>Double-flat accidental value.</summary></documentation>
          </field>
          <field name="Flat" id="F:Midi.Note.Flat" access="Public" contract="Static" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary>Flat accidental value.</summary></documentation>
          </field>
          <field name="Natural" id="F:Midi.Note.Natural" access="Public" contract="Static" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary>Natural accidental value.</summary></documentation>
          </field>
          <field name="Sharp" id="F:Midi.Note.Sharp" access="Public" contract="Static" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary>Sharp accidental value.</summary></documentation>
          </field>
          <field name="DoubleSharp" id="F:Midi.Note.DoubleSharp" access="Public" contract="Static" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary>Double-sharp accidental value.</summary></documentation>
          </field>
          <property name="Letter" id="P:Midi.Note.Letter" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Char" displayName="Char" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary>The letter for this note name, in ['A'..'G'].</summary></documentation>
          </property>
          <property name="Accidental" id="P:Midi.Note.Accidental" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary>The accidental for this note name.</summary>
<remarks>
  <para>Zero means natural, positive values are sharp by that many semitones, and negative values are flat by that many semitones. Likely values are <see cref="F:Midi.Note.Natural" /> (0), <see cref="F:Midi.Note.Sharp" /> (1), <see cref="F:Midi.Note.DoubleSharp" /> (2), <see cref="F:Midi.Note.Flat" /> (-1), and <see cref="F:Midi.Note.DoubleFlat" /> (-2).</para>
</remarks></documentation>
          </property>
          <property name="PositionInOctave" id="P:Midi.Note.PositionInOctave" access="Public" contract="Normal" get="Public" set="false" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true">
            <documentation><summary>This note's position in the octave, where octaves start at each C.</summary></documentation>
          </property>
          <method name="ToString" displayName="ToString" id="M:Midi.Note.ToString" access="Public" contract="Override" valueType="false">
            <returnType typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <documentation><summary> ToString returns the note name. </summary>
<returns>The note name with '#' for sharp and 'b' for flat. For example, "G", "A#", "Cb", "Fbb".</returns></documentation>
          </method>
          <method name="ParseNote" displayName="ParseNote" id="M:Midi.Note.ParseNote(System.String,System.Int32@)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <documentation><summary> Parses a Note from s, starting at position pos. </summary>
<param name="s">The string to parse from.</param>
<param name="pos">The position to start at. On success, advances pos to after the end of the note.</param>
<returns>The note.</returns>
<exception cref="T:System.ArgumentException">A note cannot be parsed.</exception>
<remarks>
  <para>This function must find a valid letter at s[pos], and then optionally a sequence of '#' (sharps) or 'b' (flats). It finds as many of the accidental as it can and then stops at the first character that can't be part of the accidental.</para>
</remarks></documentation>
            <parameter name="s" typeId="T:System.String" displayName="String" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
            <parameter name="pos" direction="ref" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="IsEharmonicWith" displayName="IsEharmonicWith" id="M:Midi.Note.IsEharmonicWith(Midi.Note)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Returns true if this note name is enharmonic with otherNote. </summary>
<param name="otherNote">Another note.</param>
<returns>True if the names can refer to the same pitch.</returns></documentation>
            <parameter name="otherNote" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="PitchInOctave" displayName="PitchInOctave" id="M:Midi.Note.PitchInOctave(System.Int32)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <documentation><summary> Returns the pitch for this note in the specified octave. </summary>
<param name="octave">The octave, where octaves begin at each C and Middle C is the first note in octave 4.</param>
<returns>The pitch with this name in the specified octave.</returns></documentation>
            <parameter name="octave" typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          </method>
          <method name="PitchAtOrAbove" displayName="PitchAtOrAbove" id="M:Midi.Note.PitchAtOrAbove(Midi.Pitch)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <documentation><summary> Returns the pitch for this note that is at or above nearPitch. </summary>
<param name="nearPitch">The pitch from which the search is based.</param>
<returns>The pitch for this note at or above nearPitch.</returns></documentation>
            <parameter name="nearPitch" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="PitchAtOrBelow" displayName="PitchAtOrBelow" id="M:Midi.Note.PitchAtOrBelow(Midi.Pitch)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <documentation><summary> Returns the pitch for this note that is at or below nearPitch. </summary>
<param name="nearPitch">The pitch from which the search is based.</param>
<returns>The pitch for this note at or below nearPitch.</returns></documentation>
            <parameter name="nearPitch" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="SemitonesUpTo" displayName="SemitonesUpTo" id="M:Midi.Note.SemitonesUpTo(Midi.Note)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Returns the number of semitones it takes to move up to the next otherNote. </summary>
<param name="otherNote">The other note.</param>
<returns>The number of semitones.</returns></documentation>
            <parameter name="otherNote" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="SemitonesDownTo" displayName="SemitonesDownTo" id="M:Midi.Note.SemitonesDownTo(Midi.Note)" access="Public" contract="Normal" valueType="true">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Returns the number of semitones it takes to move down to the next otherNote. </summary>
<param name="otherNote">The other note.</param>
<returns>The number of semitones.</returns></documentation>
            <parameter name="otherNote" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </method>
          <method name="Equals" displayName="Equals" id="M:Midi.Note.Equals(System.Object)" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Value equality for Note. </summary></documentation>
            <parameter name="obj" typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="GetHashCode" displayName="GetHashCode" id="M:Midi.Note.GetHashCode" access="Public" contract="Override" valueType="true">
            <returnType typeId="T:System.Int32" displayName="Int32" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary> Hash code. </summary></documentation>
          </method>
          <method name="GetType" displayName="GetType" id="M:Midi.Note.GetType" access="Public" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.GetType">
            <returnType typeId="T:System.Type" displayName="Type" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <method name="Finalize" displayName="Finalize" id="M:Midi.Note.Finalize" access="Family" contract="Override" valueType="true" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.Finalize">
            <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <attribute name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
              <property name="ConsistencyGuarantee" type="System.Runtime.ConstrainedExecution.Consistency" value="Consistency.WillNotCorruptState" />
              <property name="Cer" type="System.Runtime.ConstrainedExecution.Cer" value="Cer.Success" />
            </attribute>
          </method>
          <method name="MemberwiseClone" displayName="MemberwiseClone" id="M:Midi.Note.MemberwiseClone" access="Family" contract="Normal" valueType="false" declaringType="System.Object" declaringAssembly="mscorlib" declaringId="M:System.Object.MemberwiseClone">
            <returnType typeId="T:System.Object" displayName="Object" namespace="System" assembly="mscorlib" nullable="false" valueType="false" />
          </method>
          <operator name="op_Equality" id="M:Midi.Note.op_Equality(Midi.Note,Midi.Note)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary>Equality operator does value comparison.</summary></documentation>
            <parameter name="a" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="b" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </operator>
          <operator name="op_Inequality" id="M:Midi.Note.op_Inequality(Midi.Note,Midi.Note)" access="Public" contract="Static" valueType="true">
            <returnType typeId="T:System.Boolean" displayName="Boolean" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
            <documentation><summary>Inequality operator does value comparison.</summary></documentation>
            <parameter name="a" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
            <parameter name="b" typeId="T:Midi.Note" displayName="Note" namespace="Midi" assembly="Midi" nullable="false" valueType="true" />
          </operator>
        </structure>
        <delegate name="InputDevice.NoteOnHandler" displayName="InputDevice.NoteOnHandler" namespace="Midi" id="T:Midi.InputDevice.NoteOnHandler" access="NestedPublic" valueType="true">
          <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          <documentation><summary> Delegate called when an input device receives a Note On message. </summary></documentation>
          <parameter name="msg" typeId="T:Midi.NoteOnMessage" displayName="NoteOnMessage" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
        </delegate>
        <delegate name="InputDevice.NoteOffHandler" displayName="InputDevice.NoteOffHandler" namespace="Midi" id="T:Midi.InputDevice.NoteOffHandler" access="NestedPublic" valueType="true">
          <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          <documentation><summary> Delegate called when an input device receives a Note Off message. </summary></documentation>
          <parameter name="msg" typeId="T:Midi.NoteOffMessage" displayName="NoteOffMessage" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
        </delegate>
        <delegate name="InputDevice.ControlChangeHandler" displayName="InputDevice.ControlChangeHandler" namespace="Midi" id="T:Midi.InputDevice.ControlChangeHandler" access="NestedPublic" valueType="true">
          <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          <documentation><summary> Delegate called when an input device receives a Control Change message. </summary></documentation>
          <parameter name="msg" typeId="T:Midi.ControlChangeMessage" displayName="ControlChangeMessage" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
        </delegate>
        <delegate name="InputDevice.ProgramChangeHandler" displayName="InputDevice.ProgramChangeHandler" namespace="Midi" id="T:Midi.InputDevice.ProgramChangeHandler" access="NestedPublic" valueType="true">
          <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          <documentation><summary> Delegate called when an input device receives a Program Change message. </summary></documentation>
          <parameter name="msg" typeId="T:Midi.ProgramChangeMessage" displayName="ProgramChangeMessage" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
        </delegate>
        <delegate name="InputDevice.PitchBendHandler" displayName="InputDevice.PitchBendHandler" namespace="Midi" id="T:Midi.InputDevice.PitchBendHandler" access="NestedPublic" valueType="true">
          <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          <documentation><summary> Delegate called when an input device receives a Pitch Bend message. </summary></documentation>
          <parameter name="msg" typeId="T:Midi.PitchBendMessage" displayName="PitchBendMessage" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
        </delegate>
        <delegate name="InputDevice.SysExHandler" displayName="InputDevice.SysExHandler" namespace="Midi" id="T:Midi.InputDevice.SysExHandler" access="NestedPublic" valueType="true">
          <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          <documentation><summary> Delegate called when an input device receives a SysEx message. </summary></documentation>
          <parameter name="msg" typeId="T:Midi.SysExMessage" displayName="SysExMessage" namespace="Midi" assembly="Midi" nullable="false" valueType="false" />
        </delegate>
        <delegate name="CallbackMessage.CallbackType" displayName="CallbackMessage.CallbackType" namespace="Midi" id="T:Midi.CallbackMessage.CallbackType" access="NestedPublic" valueType="true">
          <returnType typeId="T:System.Void" displayName="Void" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
          <documentation><summary> Delegate called when a CallbackMessage is sent. </summary>
<param name="time">The time at which this event was scheduled.</param>
<returns>Additional messages which should be scheduled as a result of this callback, or null.</returns></documentation>
          <parameter name="time" typeId="T:System.Single" displayName="Single" namespace="System" assembly="mscorlib" nullable="false" valueType="true" />
        </delegate>
        <enumeration name="Channel" id="T:Midi.Channel" displayName="Channel" namespace="Midi" access="Public">
          <documentation><summary> A MIDI Channel. </summary>
<remarks>
  <para>Each MIDI device has 16 independent channels. Channels are named starting at 1, but are encoded programmatically starting at 0.</para>
  <para>All of the channels are general-purpose except for Channel10, which is the dedicated percussion channel. Any notes sent to that channel will play <see cref="T:Midi.Percussion">percussion notes</see>, regardless of any <see cref="M:Midi.OutputDevice.SendProgramChange(Midi.Channel,Midi.Instrument)">Program Change</see> messages sent on that channel.</para>
  <para>This enum has extension methods, such as <see cref="M:Midi.ChannelExtensionMethods.Name(Midi.Channel)" /> and <see cref="M:Midi.ChannelExtensionMethods.IsValid(Midi.Channel)" />, defined in <see cref="T:Midi.ChannelExtensionMethods" />. </para>
</remarks></documentation>
          <field name="Channel1" id="F:Midi.Channel.Channel1" access="Public" contract="Static" literal="true" value="0" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 1. </summary></documentation>
          </field>
          <field name="Channel2" id="F:Midi.Channel.Channel2" access="Public" contract="Static" literal="true" value="1" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 2. </summary></documentation>
          </field>
          <field name="Channel3" id="F:Midi.Channel.Channel3" access="Public" contract="Static" literal="true" value="2" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 3. </summary></documentation>
          </field>
          <field name="Channel4" id="F:Midi.Channel.Channel4" access="Public" contract="Static" literal="true" value="3" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 4. </summary></documentation>
          </field>
          <field name="Channel5" id="F:Midi.Channel.Channel5" access="Public" contract="Static" literal="true" value="4" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 5. </summary></documentation>
          </field>
          <field name="Channel6" id="F:Midi.Channel.Channel6" access="Public" contract="Static" literal="true" value="5" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 6. </summary></documentation>
          </field>
          <field name="Channel7" id="F:Midi.Channel.Channel7" access="Public" contract="Static" literal="true" value="6" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 7. </summary></documentation>
          </field>
          <field name="Channel8" id="F:Midi.Channel.Channel8" access="Public" contract="Static" literal="true" value="7" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 8. </summary></documentation>
          </field>
          <field name="Channel9" id="F:Midi.Channel.Channel9" access="Public" contract="Static" literal="true" value="8" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 9. </summary></documentation>
          </field>
          <field name="Channel10" id="F:Midi.Channel.Channel10" access="Public" contract="Static" literal="true" value="9" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 10, the dedicated percussion channel. </summary></documentation>
          </field>
          <field name="Channel11" id="F:Midi.Channel.Channel11" access="Public" contract="Static" literal="true" value="10" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 11. </summary></documentation>
          </field>
          <field name="Channel12" id="F:Midi.Channel.Channel12" access="Public" contract="Static" literal="true" value="11" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 12. </summary></documentation>
          </field>
          <field name="Channel13" id="F:Midi.Channel.Channel13" access="Public" contract="Static" literal="true" value="12" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 13. </summary></documentation>
          </field>
          <field name="Channel14" id="F:Midi.Channel.Channel14" access="Public" contract="Static" literal="true" value="13" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 14. </summary></documentation>
          </field>
          <field name="Channel15" id="F:Midi.Channel.Channel15" access="Public" contract="Static" literal="true" value="14" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 15. </summary></documentation>
          </field>
          <field name="Channel16" id="F:Midi.Channel.Channel16" access="Public" contract="Static" literal="true" value="15" typeId="T:Midi.Channel" displayName="Channel" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary> MIDI Channel 16. </summary></documentation>
          </field>
        </enumeration>
        <enumeration name="Control" id="T:Midi.Control" displayName="Control" namespace="Midi" access="Public">
          <documentation><summary> MIDI Control, used in Control Change messages. </summary>
<remarks>
  <para>In MIDI, Control Change messages are used to influence various auxiliary "controls" on a device, such as knobs, levers, and pedals. Controls are specified with integers in [0..127]. This enum provides an incomplete list of controls, because most controls are too obscure to document effetively here. Even for the ones listed here, the details of how the value is interpreted are arcane. Please see the MIDI spec for details.</para>
  <para>The most commonly used control is SustainPedal, which is considered off when &lt; 64, on when &gt; 64.</para>
  <para>This enum has extension methods, such as <see cref="M:Midi.ControlExtensionMethods.Name(Midi.Control)" /> and <see cref="M:Midi.ControlExtensionMethods.IsValid(Midi.Control)" />, defined in <see cref="T:Midi.ControlExtensionMethods" />.</para>
</remarks></documentation>
          <field name="ModulationWheel" id="F:Midi.Control.ModulationWheel" access="Public" contract="Static" literal="true" value="1" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="DataEntryMSB" id="F:Midi.Control.DataEntryMSB" access="Public" contract="Static" literal="true" value="6" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="Volume" id="F:Midi.Control.Volume" access="Public" contract="Static" literal="true" value="7" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="Pan" id="F:Midi.Control.Pan" access="Public" contract="Static" literal="true" value="10" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="Expression" id="F:Midi.Control.Expression" access="Public" contract="Static" literal="true" value="11" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="DataEntryLSB" id="F:Midi.Control.DataEntryLSB" access="Public" contract="Static" literal="true" value="38" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="SustainPedal" id="F:Midi.Control.SustainPedal" access="Public" contract="Static" literal="true" value="64" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="ReverbLevel" id="F:Midi.Control.ReverbLevel" access="Public" contract="Static" literal="true" value="91" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="TremoloLevel" id="F:Midi.Control.TremoloLevel" access="Public" contract="Static" literal="true" value="92" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="ChorusLevel" id="F:Midi.Control.ChorusLevel" access="Public" contract="Static" literal="true" value="93" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="CelesteLevel" id="F:Midi.Control.CelesteLevel" access="Public" contract="Static" literal="true" value="94" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="PhaserLevel" id="F:Midi.Control.PhaserLevel" access="Public" contract="Static" literal="true" value="95" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="NonRegisteredParameterLSB" id="F:Midi.Control.NonRegisteredParameterLSB" access="Public" contract="Static" literal="true" value="98" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="NonRegisteredParameterMSB" id="F:Midi.Control.NonRegisteredParameterMSB" access="Public" contract="Static" literal="true" value="99" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="RegisteredParameterNumberLSB" id="F:Midi.Control.RegisteredParameterNumberLSB" access="Public" contract="Static" literal="true" value="100" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="RegisteredParameterNumberMSB" id="F:Midi.Control.RegisteredParameterNumberMSB" access="Public" contract="Static" literal="true" value="101" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="AllControllersOff" id="F:Midi.Control.AllControllersOff" access="Public" contract="Static" literal="true" value="121" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
          <field name="AllNotesOff" id="F:Midi.Control.AllNotesOff" access="Public" contract="Static" literal="true" value="123" typeId="T:Midi.Control" displayName="Control" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI Control--See MIDI spec for details.</summary></documentation>
          </field>
        </enumeration>
        <enumeration name="Instrument" id="T:Midi.Instrument" displayName="Instrument" namespace="Midi" access="Public">
          <documentation><summary> General MIDI instrument, used in Program Change messages. </summary>
<remarks>
  <para>The MIDI protocol defines a Program Change message, which can be used to switch a device among "presets". The General MIDI specification further standardizes those presets into the specific instruments in this enum. General-MIDI-compliant devices will have these particular instruments; non-GM devices may have other instruments.</para>
  <para>MIDI instruments are one-indexed in the spec, but they're zero-indexed in code, so we have them zero-indexed here.</para>
  <para>This enum has extension methods, such as <see cref="M:Midi.InstrumentExtensionMethods.Name(Midi.Instrument)" /> and <see cref="M:Midi.InstrumentExtensionMethods.IsValid(Midi.Instrument)" />, defined in <see cref="T:Midi.InstrumentExtensionMethods" />.</para>
</remarks></documentation>
          <field name="AcousticGrandPiano" id="F:Midi.Instrument.AcousticGrandPiano" access="Public" contract="Static" literal="true" value="0" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 0 ("Acoustic Grand Piano").</summary></documentation>
          </field>
          <field name="BrightAcousticPiano" id="F:Midi.Instrument.BrightAcousticPiano" access="Public" contract="Static" literal="true" value="1" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 1 ("Bright Acoustic Piano").</summary></documentation>
          </field>
          <field name="ElectricGrandPiano" id="F:Midi.Instrument.ElectricGrandPiano" access="Public" contract="Static" literal="true" value="2" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 2 ("Electric Grand Piano").</summary></documentation>
          </field>
          <field name="HonkyTonkPiano" id="F:Midi.Instrument.HonkyTonkPiano" access="Public" contract="Static" literal="true" value="3" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 3 ("Honky Tonk Piano").</summary></documentation>
          </field>
          <field name="ElectricPiano1" id="F:Midi.Instrument.ElectricPiano1" access="Public" contract="Static" literal="true" value="4" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 4 ("Electric Piano 1").</summary></documentation>
          </field>
          <field name="ElectricPiano2" id="F:Midi.Instrument.ElectricPiano2" access="Public" contract="Static" literal="true" value="5" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 5 ("Electric Piano 2").</summary></documentation>
          </field>
          <field name="Harpsichord" id="F:Midi.Instrument.Harpsichord" access="Public" contract="Static" literal="true" value="6" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 6 ("Harpsichord").</summary></documentation>
          </field>
          <field name="Clavinet" id="F:Midi.Instrument.Clavinet" access="Public" contract="Static" literal="true" value="7" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 7 ("Clavinet").</summary></documentation>
          </field>
          <field name="Celesta" id="F:Midi.Instrument.Celesta" access="Public" contract="Static" literal="true" value="8" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 8 ("Celesta").</summary></documentation>
          </field>
          <field name="Glockenspiel" id="F:Midi.Instrument.Glockenspiel" access="Public" contract="Static" literal="true" value="9" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 9 ("Glockenspiel").</summary></documentation>
          </field>
          <field name="MusicBox" id="F:Midi.Instrument.MusicBox" access="Public" contract="Static" literal="true" value="10" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 10 ("Music Box").</summary></documentation>
          </field>
          <field name="Vibraphone" id="F:Midi.Instrument.Vibraphone" access="Public" contract="Static" literal="true" value="11" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 11 ("Vibraphone").</summary></documentation>
          </field>
          <field name="Marimba" id="F:Midi.Instrument.Marimba" access="Public" contract="Static" literal="true" value="12" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 12 ("Marimba").</summary></documentation>
          </field>
          <field name="Xylophone" id="F:Midi.Instrument.Xylophone" access="Public" contract="Static" literal="true" value="13" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 13 ("Xylophone").</summary></documentation>
          </field>
          <field name="TubularBells" id="F:Midi.Instrument.TubularBells" access="Public" contract="Static" literal="true" value="14" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 14 ("Tubular Bells").</summary></documentation>
          </field>
          <field name="Dulcimer" id="F:Midi.Instrument.Dulcimer" access="Public" contract="Static" literal="true" value="15" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 15 ("Dulcimer").</summary></documentation>
          </field>
          <field name="DrawbarOrgan" id="F:Midi.Instrument.DrawbarOrgan" access="Public" contract="Static" literal="true" value="16" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 16 ("Drawbar Organ").</summary></documentation>
          </field>
          <field name="PercussiveOrgan" id="F:Midi.Instrument.PercussiveOrgan" access="Public" contract="Static" literal="true" value="17" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 17 ("Percussive Organ").</summary></documentation>
          </field>
          <field name="RockOrgan" id="F:Midi.Instrument.RockOrgan" access="Public" contract="Static" literal="true" value="18" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 18 ("Rock Organ").</summary></documentation>
          </field>
          <field name="ChurchOrgan" id="F:Midi.Instrument.ChurchOrgan" access="Public" contract="Static" literal="true" value="19" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 19 ("Church Organ").</summary></documentation>
          </field>
          <field name="ReedOrgan" id="F:Midi.Instrument.ReedOrgan" access="Public" contract="Static" literal="true" value="20" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 20 ("Reed Organ").</summary></documentation>
          </field>
          <field name="Accordion" id="F:Midi.Instrument.Accordion" access="Public" contract="Static" literal="true" value="21" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 21 ("Accordion").</summary></documentation>
          </field>
          <field name="Harmonica" id="F:Midi.Instrument.Harmonica" access="Public" contract="Static" literal="true" value="22" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 22 ("Harmonica").</summary></documentation>
          </field>
          <field name="TangoAccordion" id="F:Midi.Instrument.TangoAccordion" access="Public" contract="Static" literal="true" value="23" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 23 ("Tango Accordion").</summary></documentation>
          </field>
          <field name="AcousticGuitarNylon" id="F:Midi.Instrument.AcousticGuitarNylon" access="Public" contract="Static" literal="true" value="24" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 24 ("Acoustic Guitar (nylon)").</summary></documentation>
          </field>
          <field name="AcousticGuitarSteel" id="F:Midi.Instrument.AcousticGuitarSteel" access="Public" contract="Static" literal="true" value="25" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 25 ("Acoustic Guitar (steel)").</summary></documentation>
          </field>
          <field name="ElectricGuitarJazz" id="F:Midi.Instrument.ElectricGuitarJazz" access="Public" contract="Static" literal="true" value="26" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 26 ("Electric Guitar (jazz)").</summary></documentation>
          </field>
          <field name="ElectricGuitarClean" id="F:Midi.Instrument.ElectricGuitarClean" access="Public" contract="Static" literal="true" value="27" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 27 ("Electric Guitar (clean)").</summary></documentation>
          </field>
          <field name="ElectricGuitarMuted" id="F:Midi.Instrument.ElectricGuitarMuted" access="Public" contract="Static" literal="true" value="28" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 28 ("Electric Guitar (muted)").</summary></documentation>
          </field>
          <field name="OverdrivenGuitar" id="F:Midi.Instrument.OverdrivenGuitar" access="Public" contract="Static" literal="true" value="29" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 29 ("Overdriven Guitar").</summary></documentation>
          </field>
          <field name="DistortionGuitar" id="F:Midi.Instrument.DistortionGuitar" access="Public" contract="Static" literal="true" value="30" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 30 ("Distortion Guitar").</summary></documentation>
          </field>
          <field name="GuitarHarmonics" id="F:Midi.Instrument.GuitarHarmonics" access="Public" contract="Static" literal="true" value="31" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 31 ("Guitar Harmonics").</summary></documentation>
          </field>
          <field name="AcousticBass" id="F:Midi.Instrument.AcousticBass" access="Public" contract="Static" literal="true" value="32" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 32 ("Acoustic Bass").</summary></documentation>
          </field>
          <field name="ElectricBassFinger" id="F:Midi.Instrument.ElectricBassFinger" access="Public" contract="Static" literal="true" value="33" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 33 ("Electric Bass (finger)").</summary></documentation>
          </field>
          <field name="ElectricBassPick" id="F:Midi.Instrument.ElectricBassPick" access="Public" contract="Static" literal="true" value="34" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 34 ("Electric Bass (pick)").</summary></documentation>
          </field>
          <field name="FretlessBass" id="F:Midi.Instrument.FretlessBass" access="Public" contract="Static" literal="true" value="35" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 35 ("Fretless Bass").</summary></documentation>
          </field>
          <field name="SlapBass1" id="F:Midi.Instrument.SlapBass1" access="Public" contract="Static" literal="true" value="36" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 36 ("Slap Bass 1").</summary></documentation>
          </field>
          <field name="SlapBass2" id="F:Midi.Instrument.SlapBass2" access="Public" contract="Static" literal="true" value="37" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 37 ("Slap Bass 2").</summary></documentation>
          </field>
          <field name="SynthBass1" id="F:Midi.Instrument.SynthBass1" access="Public" contract="Static" literal="true" value="38" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 38 ("Synth Bass 1").</summary></documentation>
          </field>
          <field name="SynthBass2" id="F:Midi.Instrument.SynthBass2" access="Public" contract="Static" literal="true" value="39" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 39("Synth Bass 2").</summary></documentation>
          </field>
          <field name="Violin" id="F:Midi.Instrument.Violin" access="Public" contract="Static" literal="true" value="40" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 40 ("Violin").</summary></documentation>
          </field>
          <field name="Viola" id="F:Midi.Instrument.Viola" access="Public" contract="Static" literal="true" value="41" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 41 ("Viola").</summary></documentation>
          </field>
          <field name="Cello" id="F:Midi.Instrument.Cello" access="Public" contract="Static" literal="true" value="42" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 42 ("Cello").</summary></documentation>
          </field>
          <field name="Contrabass" id="F:Midi.Instrument.Contrabass" access="Public" contract="Static" literal="true" value="43" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 43 ("Contrabass").</summary></documentation>
          </field>
          <field name="TremoloStrings" id="F:Midi.Instrument.TremoloStrings" access="Public" contract="Static" literal="true" value="44" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 44 ("Tremolo Strings").</summary></documentation>
          </field>
          <field name="PizzicatoStrings" id="F:Midi.Instrument.PizzicatoStrings" access="Public" contract="Static" literal="true" value="45" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 45 ("Pizzicato Strings").</summary></documentation>
          </field>
          <field name="OrchestralHarp" id="F:Midi.Instrument.OrchestralHarp" access="Public" contract="Static" literal="true" value="46" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 46 ("Orchestral Harp").</summary></documentation>
          </field>
          <field name="Timpani" id="F:Midi.Instrument.Timpani" access="Public" contract="Static" literal="true" value="47" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 47 ("Timpani").</summary></documentation>
          </field>
          <field name="StringEnsemble1" id="F:Midi.Instrument.StringEnsemble1" access="Public" contract="Static" literal="true" value="48" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 48 ("String Ensemble 1").</summary></documentation>
          </field>
          <field name="StringEnsemble2" id="F:Midi.Instrument.StringEnsemble2" access="Public" contract="Static" literal="true" value="49" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 49 ("String Ensemble 2").</summary></documentation>
          </field>
          <field name="SynthStrings1" id="F:Midi.Instrument.SynthStrings1" access="Public" contract="Static" literal="true" value="50" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 50 ("Synth Strings 1").</summary></documentation>
          </field>
          <field name="SynthStrings2" id="F:Midi.Instrument.SynthStrings2" access="Public" contract="Static" literal="true" value="51" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 51 ("Synth Strings 2").</summary></documentation>
          </field>
          <field name="ChoirAahs" id="F:Midi.Instrument.ChoirAahs" access="Public" contract="Static" literal="true" value="52" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 52 ("Choir Aahs").</summary></documentation>
          </field>
          <field name="VoiceOohs" id="F:Midi.Instrument.VoiceOohs" access="Public" contract="Static" literal="true" value="53" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 53 ("Voice oohs").</summary></documentation>
          </field>
          <field name="SynthVoice" id="F:Midi.Instrument.SynthVoice" access="Public" contract="Static" literal="true" value="54" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 54 ("Synth Voice").</summary></documentation>
          </field>
          <field name="OrchestraHit" id="F:Midi.Instrument.OrchestraHit" access="Public" contract="Static" literal="true" value="55" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 55 ("Orchestra Hit").</summary></documentation>
          </field>
          <field name="Trumpet" id="F:Midi.Instrument.Trumpet" access="Public" contract="Static" literal="true" value="56" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 56 ("Trumpet").</summary></documentation>
          </field>
          <field name="Trombone" id="F:Midi.Instrument.Trombone" access="Public" contract="Static" literal="true" value="57" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 57 ("Trombone").</summary></documentation>
          </field>
          <field name="Tuba" id="F:Midi.Instrument.Tuba" access="Public" contract="Static" literal="true" value="58" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 58 ("Tuba").</summary></documentation>
          </field>
          <field name="MutedTrumpet" id="F:Midi.Instrument.MutedTrumpet" access="Public" contract="Static" literal="true" value="59" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 59 ("Muted Trumpet").</summary></documentation>
          </field>
          <field name="FrenchHorn" id="F:Midi.Instrument.FrenchHorn" access="Public" contract="Static" literal="true" value="60" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 60 ("French Horn").</summary></documentation>
          </field>
          <field name="BrassSection" id="F:Midi.Instrument.BrassSection" access="Public" contract="Static" literal="true" value="61" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 61 ("Brass Section").</summary></documentation>
          </field>
          <field name="SynthBrass1" id="F:Midi.Instrument.SynthBrass1" access="Public" contract="Static" literal="true" value="62" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 62 ("Synth Brass 1").</summary></documentation>
          </field>
          <field name="SynthBrass2" id="F:Midi.Instrument.SynthBrass2" access="Public" contract="Static" literal="true" value="63" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 63 ("Synth Brass 2").</summary></documentation>
          </field>
          <field name="SopranoSax" id="F:Midi.Instrument.SopranoSax" access="Public" contract="Static" literal="true" value="64" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 64 ("Soprano Sax").</summary></documentation>
          </field>
          <field name="AltoSax" id="F:Midi.Instrument.AltoSax" access="Public" contract="Static" literal="true" value="65" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 65 ("Alto Sax").</summary></documentation>
          </field>
          <field name="TenorSax" id="F:Midi.Instrument.TenorSax" access="Public" contract="Static" literal="true" value="66" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 66 ("Tenor Sax").</summary></documentation>
          </field>
          <field name="BaritoneSax" id="F:Midi.Instrument.BaritoneSax" access="Public" contract="Static" literal="true" value="67" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 67 ("Baritone Sax").</summary></documentation>
          </field>
          <field name="Oboe" id="F:Midi.Instrument.Oboe" access="Public" contract="Static" literal="true" value="68" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 68 ("Oboe").</summary></documentation>
          </field>
          <field name="EnglishHorn" id="F:Midi.Instrument.EnglishHorn" access="Public" contract="Static" literal="true" value="69" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 69 ("English Horn").</summary></documentation>
          </field>
          <field name="Bassoon" id="F:Midi.Instrument.Bassoon" access="Public" contract="Static" literal="true" value="70" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 70 ("Bassoon").</summary></documentation>
          </field>
          <field name="Clarinet" id="F:Midi.Instrument.Clarinet" access="Public" contract="Static" literal="true" value="71" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 71 ("Clarinet").</summary></documentation>
          </field>
          <field name="Piccolo" id="F:Midi.Instrument.Piccolo" access="Public" contract="Static" literal="true" value="72" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 72 ("Piccolo").</summary></documentation>
          </field>
          <field name="Flute" id="F:Midi.Instrument.Flute" access="Public" contract="Static" literal="true" value="73" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 73 ("Flute").</summary></documentation>
          </field>
          <field name="Recorder" id="F:Midi.Instrument.Recorder" access="Public" contract="Static" literal="true" value="74" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 74 ("Recorder").</summary></documentation>
          </field>
          <field name="PanFlute" id="F:Midi.Instrument.PanFlute" access="Public" contract="Static" literal="true" value="75" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 75 ("PanFlute").</summary></documentation>
          </field>
          <field name="BlownBottle" id="F:Midi.Instrument.BlownBottle" access="Public" contract="Static" literal="true" value="76" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 76 ("Blown Bottle").</summary></documentation>
          </field>
          <field name="Shakuhachi" id="F:Midi.Instrument.Shakuhachi" access="Public" contract="Static" literal="true" value="77" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 77 ("Shakuhachi").</summary></documentation>
          </field>
          <field name="Whistle" id="F:Midi.Instrument.Whistle" access="Public" contract="Static" literal="true" value="78" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 78 ("Whistle").</summary></documentation>
          </field>
          <field name="Ocarina" id="F:Midi.Instrument.Ocarina" access="Public" contract="Static" literal="true" value="79" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 79 ("Ocarina").</summary></documentation>
          </field>
          <field name="Lead1Square" id="F:Midi.Instrument.Lead1Square" access="Public" contract="Static" literal="true" value="80" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 80 ("Lead 1 (square)").</summary></documentation>
          </field>
          <field name="Lead2Sawtooth" id="F:Midi.Instrument.Lead2Sawtooth" access="Public" contract="Static" literal="true" value="81" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 81 ("Lead 2 (sawtooth)").</summary></documentation>
          </field>
          <field name="Lead3Calliope" id="F:Midi.Instrument.Lead3Calliope" access="Public" contract="Static" literal="true" value="82" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 82 ("Lead 3 (calliope)").</summary></documentation>
          </field>
          <field name="Lead4Chiff" id="F:Midi.Instrument.Lead4Chiff" access="Public" contract="Static" literal="true" value="83" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 83 ("Lead 4 (chiff)").</summary></documentation>
          </field>
          <field name="Lead5Charang" id="F:Midi.Instrument.Lead5Charang" access="Public" contract="Static" literal="true" value="84" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 84 ("Lead 5 (charang)").</summary></documentation>
          </field>
          <field name="Lead6Voice" id="F:Midi.Instrument.Lead6Voice" access="Public" contract="Static" literal="true" value="85" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 85 ("Lead 6 (voice)").</summary></documentation>
          </field>
          <field name="Lead7Fifths" id="F:Midi.Instrument.Lead7Fifths" access="Public" contract="Static" literal="true" value="86" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 86 ("Lead 7 (fifths)").</summary></documentation>
          </field>
          <field name="Lead8BassPlusLead" id="F:Midi.Instrument.Lead8BassPlusLead" access="Public" contract="Static" literal="true" value="87" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 87 ("Lead 8 (bass + lead)").</summary></documentation>
          </field>
          <field name="Pad1NewAge" id="F:Midi.Instrument.Pad1NewAge" access="Public" contract="Static" literal="true" value="88" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 88 ("Pad 1 (new age)").</summary></documentation>
          </field>
          <field name="Pad2Warm" id="F:Midi.Instrument.Pad2Warm" access="Public" contract="Static" literal="true" value="89" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 89 ("Pad 2 (warm)").</summary></documentation>
          </field>
          <field name="Pad3Polysynth" id="F:Midi.Instrument.Pad3Polysynth" access="Public" contract="Static" literal="true" value="90" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 90 ("Pad 3 (polysynth)").</summary></documentation>
          </field>
          <field name="Pad4Choir" id="F:Midi.Instrument.Pad4Choir" access="Public" contract="Static" literal="true" value="91" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 91 ("Pad 4 (choir)").</summary></documentation>
          </field>
          <field name="Pad5Bowed" id="F:Midi.Instrument.Pad5Bowed" access="Public" contract="Static" literal="true" value="92" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 92 ("Pad 5 (bowed)").</summary></documentation>
          </field>
          <field name="Pad6Metallic" id="F:Midi.Instrument.Pad6Metallic" access="Public" contract="Static" literal="true" value="93" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 93 ("Pad 6 (metallic)").</summary></documentation>
          </field>
          <field name="Pad7Halo" id="F:Midi.Instrument.Pad7Halo" access="Public" contract="Static" literal="true" value="94" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 94 ("Pad 7 (halo)").</summary></documentation>
          </field>
          <field name="Pad8Sweep" id="F:Midi.Instrument.Pad8Sweep" access="Public" contract="Static" literal="true" value="95" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 95 ("Pad 8 (sweep)").</summary></documentation>
          </field>
          <field name="FX1Rain" id="F:Midi.Instrument.FX1Rain" access="Public" contract="Static" literal="true" value="96" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 96 ("FX 1 (rain)").</summary></documentation>
          </field>
          <field name="FX2Soundtrack" id="F:Midi.Instrument.FX2Soundtrack" access="Public" contract="Static" literal="true" value="97" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 97 ("FX 2 (soundtrack)").</summary></documentation>
          </field>
          <field name="FX3Crystal" id="F:Midi.Instrument.FX3Crystal" access="Public" contract="Static" literal="true" value="98" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 98 ("FX 3 (crystal)").</summary></documentation>
          </field>
          <field name="FX4Atmosphere" id="F:Midi.Instrument.FX4Atmosphere" access="Public" contract="Static" literal="true" value="99" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 99 ("FX 4 (atmosphere)").</summary></documentation>
          </field>
          <field name="FX5Brightness" id="F:Midi.Instrument.FX5Brightness" access="Public" contract="Static" literal="true" value="100" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 100 ("FX 5 (brightness)").</summary></documentation>
          </field>
          <field name="FX6Goblins" id="F:Midi.Instrument.FX6Goblins" access="Public" contract="Static" literal="true" value="101" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 101 ("FX 6 (goblins)").</summary></documentation>
          </field>
          <field name="FX7Echoes" id="F:Midi.Instrument.FX7Echoes" access="Public" contract="Static" literal="true" value="102" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 102 ("FX 7 (echoes)").</summary></documentation>
          </field>
          <field name="FX8SciFi" id="F:Midi.Instrument.FX8SciFi" access="Public" contract="Static" literal="true" value="103" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 103 ("FX 8 (sci-fi)").</summary></documentation>
          </field>
          <field name="Sitar" id="F:Midi.Instrument.Sitar" access="Public" contract="Static" literal="true" value="104" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 104 ("Sitar").</summary></documentation>
          </field>
          <field name="Banjo" id="F:Midi.Instrument.Banjo" access="Public" contract="Static" literal="true" value="105" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 105 ("Banjo").</summary></documentation>
          </field>
          <field name="Shamisen" id="F:Midi.Instrument.Shamisen" access="Public" contract="Static" literal="true" value="106" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 106 ("Shamisen").</summary></documentation>
          </field>
          <field name="Koto" id="F:Midi.Instrument.Koto" access="Public" contract="Static" literal="true" value="107" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 107 ("Koto").</summary></documentation>
          </field>
          <field name="Kalimba" id="F:Midi.Instrument.Kalimba" access="Public" contract="Static" literal="true" value="108" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 108 ("Kalimba").</summary></documentation>
          </field>
          <field name="Bagpipe" id="F:Midi.Instrument.Bagpipe" access="Public" contract="Static" literal="true" value="109" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 109 ("Bagpipe").</summary></documentation>
          </field>
          <field name="Fiddle" id="F:Midi.Instrument.Fiddle" access="Public" contract="Static" literal="true" value="110" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 110 ("Fiddle").</summary></documentation>
          </field>
          <field name="Shanai" id="F:Midi.Instrument.Shanai" access="Public" contract="Static" literal="true" value="111" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 111 ("Shanai").</summary></documentation>
          </field>
          <field name="TinkleBell" id="F:Midi.Instrument.TinkleBell" access="Public" contract="Static" literal="true" value="112" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 112 ("Tinkle Bell").</summary></documentation>
          </field>
          <field name="Agogo" id="F:Midi.Instrument.Agogo" access="Public" contract="Static" literal="true" value="113" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 113 (Agogo"").</summary></documentation>
          </field>
          <field name="SteelDrums" id="F:Midi.Instrument.SteelDrums" access="Public" contract="Static" literal="true" value="114" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 114 ("Steel Drums").</summary></documentation>
          </field>
          <field name="Woodblock" id="F:Midi.Instrument.Woodblock" access="Public" contract="Static" literal="true" value="115" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 115 ("Woodblock").</summary></documentation>
          </field>
          <field name="TaikoDrum" id="F:Midi.Instrument.TaikoDrum" access="Public" contract="Static" literal="true" value="116" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 116 ("Taiko Drum").</summary></documentation>
          </field>
          <field name="MelodicTom" id="F:Midi.Instrument.MelodicTom" access="Public" contract="Static" literal="true" value="117" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 117 ("Melodic Tom").</summary></documentation>
          </field>
          <field name="SynthDrum" id="F:Midi.Instrument.SynthDrum" access="Public" contract="Static" literal="true" value="118" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 118 ("Synth Drum").</summary></documentation>
          </field>
          <field name="ReverseCymbal" id="F:Midi.Instrument.ReverseCymbal" access="Public" contract="Static" literal="true" value="119" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 119 ("Reverse Cymbal").</summary></documentation>
          </field>
          <field name="GuitarFretNoise" id="F:Midi.Instrument.GuitarFretNoise" access="Public" contract="Static" literal="true" value="120" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 120 ("Guitar Fret Noise").</summary></documentation>
          </field>
          <field name="BreathNoise" id="F:Midi.Instrument.BreathNoise" access="Public" contract="Static" literal="true" value="121" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 121 ("Breath Noise").</summary></documentation>
          </field>
          <field name="Seashore" id="F:Midi.Instrument.Seashore" access="Public" contract="Static" literal="true" value="122" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 122 ("Seashore").</summary></documentation>
          </field>
          <field name="BirdTweet" id="F:Midi.Instrument.BirdTweet" access="Public" contract="Static" literal="true" value="123" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 123 ("Bird Tweet").</summary></documentation>
          </field>
          <field name="TelephoneRing" id="F:Midi.Instrument.TelephoneRing" access="Public" contract="Static" literal="true" value="124" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 124 ("Telephone Ring").</summary></documentation>
          </field>
          <field name="Helicopter" id="F:Midi.Instrument.Helicopter" access="Public" contract="Static" literal="true" value="125" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 125 ("Helicopter").</summary></documentation>
          </field>
          <field name="Applause" id="F:Midi.Instrument.Applause" access="Public" contract="Static" literal="true" value="126" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 126 ("Applause").</summary></documentation>
          </field>
          <field name="Gunshot" id="F:Midi.Instrument.Gunshot" access="Public" contract="Static" literal="true" value="127" typeId="T:Midi.Instrument" displayName="Instrument" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI instrument 127 ("Gunshot").</summary></documentation>
          </field>
        </enumeration>
        <enumeration name="Interval" id="T:Midi.Interval" displayName="Interval" namespace="Midi" access="Public">
          <documentation><summary> Interval measuring the relationship between pitches. </summary>
<remarks>
  <para>This enum is simply for making interval operations more explicit. When adding to or subtracting from the <see cref="T:Midi.Pitch" /> enum, one can either use ints...</para>
  <code>Pitch p = Pitch.C4 + 5;</code>
  <para>...or use the Interval enum, cast to int...</para>
  <code>Pitch p = Pitch.C4 + (int)Interval.PerfectFourth;</code>
  <para>These two examples are equivalent. The benefit of the latter is simply that it makes the intention more explicit.</para>
  <para>This enum has extension methods, such as <see cref="M:Midi.IntervalExtensionMethods.Name(Midi.Interval)" />, defined in <see cref="T:Midi.IntervalExtensionMethods" />.</para>
</remarks>
<seealso cref="T:Midi.Note" /></documentation>
          <field name="Unison" id="F:Midi.Interval.Unison" access="Public" contract="Static" literal="true" value="0" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>Unison interval, 0 semitones</summary></documentation>
          </field>
          <field name="Semitone" id="F:Midi.Interval.Semitone" access="Public" contract="Static" literal="true" value="1" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>Semitone interval, 1 semitone</summary></documentation>
          </field>
          <field name="WholeTone" id="F:Midi.Interval.WholeTone" access="Public" contract="Static" literal="true" value="2" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>Whole Tone interval, 2 semitones</summary></documentation>
          </field>
          <field name="MinorThird" id="F:Midi.Interval.MinorThird" access="Public" contract="Static" literal="true" value="3" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>Minor Third interval, 3 semitones</summary></documentation>
          </field>
          <field name="MajorThird" id="F:Midi.Interval.MajorThird" access="Public" contract="Static" literal="true" value="4" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>Major Third interval, 4 semitones</summary></documentation>
          </field>
          <field name="PerfectFourth" id="F:Midi.Interval.PerfectFourth" access="Public" contract="Static" literal="true" value="5" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>Perfect Fourth interval, 5 semitones</summary></documentation>
          </field>
          <field name="Tritone" id="F:Midi.Interval.Tritone" access="Public" contract="Static" literal="true" value="6" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>Tritone interval, 6 semitones</summary></documentation>
          </field>
          <field name="PerfectFifth" id="F:Midi.Interval.PerfectFifth" access="Public" contract="Static" literal="true" value="7" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>Perfect Fifth interval, 7 semitones</summary></documentation>
          </field>
          <field name="MinorSixth" id="F:Midi.Interval.MinorSixth" access="Public" contract="Static" literal="true" value="8" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>Minor Sixth interval, 8 semitones</summary></documentation>
          </field>
          <field name="MajorSixth" id="F:Midi.Interval.MajorSixth" access="Public" contract="Static" literal="true" value="9" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>Major Sixth interval, 9 semitones</summary></documentation>
          </field>
          <field name="MinorSeventh" id="F:Midi.Interval.MinorSeventh" access="Public" contract="Static" literal="true" value="10" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>Minor seventh interval, 10 semitones</summary></documentation>
          </field>
          <field name="MajorSeventh" id="F:Midi.Interval.MajorSeventh" access="Public" contract="Static" literal="true" value="11" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>Major Seventh interval, 11 semitones</summary></documentation>
          </field>
          <field name="Octave" id="F:Midi.Interval.Octave" access="Public" contract="Static" literal="true" value="12" typeId="T:Midi.Interval" displayName="Interval" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>Octave interval, 12 semitones</summary></documentation>
          </field>
        </enumeration>
        <enumeration name="Percussion" id="T:Midi.Percussion" displayName="Percussion" namespace="Midi" access="Public">
          <documentation><summary> General MIDI percussion note. </summary>
<remarks>
  <para> In General MIDI, notes played on <see cref="F:Midi.Channel.Channel10" /> make the following percussion sounds, regardless of any <see cref="M:Midi.OutputDevice.SendProgramChange(Midi.Channel,Midi.Instrument)">Program Change</see> messages on that channel. </para>
  <para> This enum is used with <see cref="M:Midi.OutputDevice.SendPercussion(Midi.Percussion,System.Int32)">OutputDevice.SendPercussion </see> and <see cref="T:Midi.PercussionMessage" />. Equivalently, when cast to <see cref="T:Midi.Note" /> it can be used with <see cref="M:Midi.OutputDevice.SendNoteOn(Midi.Channel,Midi.Pitch,System.Int32)">OutputDevice.SendNoteOn</see> and <see cref="T:Midi.NoteOnMessage" /> on <see cref="F:Midi.Channel.Channel10" nolink="true" />.</para>
  <para>This enum has extension methods, such as <see cref="M:Midi.PercussionExtensionMethods.Name(Midi.Percussion)" /> and <see cref="M:Midi.PercussionExtensionMethods.IsValid(Midi.Percussion)" />, defined in <see cref="T:Midi.PercussionExtensionMethods" />. </para>
</remarks></documentation>
          <field name="BassDrum2" id="F:Midi.Percussion.BassDrum2" access="Public" contract="Static" literal="true" value="35" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 35 ("Bass Drum 2").</summary></documentation>
          </field>
          <field name="BassDrum1" id="F:Midi.Percussion.BassDrum1" access="Public" contract="Static" literal="true" value="36" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 36 ("Bass Drum 1").</summary></documentation>
          </field>
          <field name="SideStick" id="F:Midi.Percussion.SideStick" access="Public" contract="Static" literal="true" value="37" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 37 ("Side Stick").</summary></documentation>
          </field>
          <field name="SnareDrum1" id="F:Midi.Percussion.SnareDrum1" access="Public" contract="Static" literal="true" value="38" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 38 ("Snare Drum 1").</summary></documentation>
          </field>
          <field name="HandClap" id="F:Midi.Percussion.HandClap" access="Public" contract="Static" literal="true" value="39" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 39 ("Hand Clap").</summary></documentation>
          </field>
          <field name="SnareDrum2" id="F:Midi.Percussion.SnareDrum2" access="Public" contract="Static" literal="true" value="40" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 40 ("Snare Drum 2").</summary></documentation>
          </field>
          <field name="LowTom2" id="F:Midi.Percussion.LowTom2" access="Public" contract="Static" literal="true" value="41" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 41 ("Low Tom 2").</summary></documentation>
          </field>
          <field name="ClosedHiHat" id="F:Midi.Percussion.ClosedHiHat" access="Public" contract="Static" literal="true" value="42" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 42 ("Closed Hi-hat").</summary></documentation>
          </field>
          <field name="LowTom1" id="F:Midi.Percussion.LowTom1" access="Public" contract="Static" literal="true" value="43" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 43 ("Low Tom 1").</summary></documentation>
          </field>
          <field name="PedalHiHat" id="F:Midi.Percussion.PedalHiHat" access="Public" contract="Static" literal="true" value="44" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 44 ("Pedal Hi-hat").</summary></documentation>
          </field>
          <field name="MidTom2" id="F:Midi.Percussion.MidTom2" access="Public" contract="Static" literal="true" value="45" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 45 ("Mid Tom 2").</summary></documentation>
          </field>
          <field name="OpenHiHat" id="F:Midi.Percussion.OpenHiHat" access="Public" contract="Static" literal="true" value="46" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 46 ("Open Hi-hat").</summary></documentation>
          </field>
          <field name="MidTom1" id="F:Midi.Percussion.MidTom1" access="Public" contract="Static" literal="true" value="47" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 47 ("Mid Tom 1").</summary></documentation>
          </field>
          <field name="HighTom2" id="F:Midi.Percussion.HighTom2" access="Public" contract="Static" literal="true" value="48" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 48 ("High Tom 2").</summary></documentation>
          </field>
          <field name="CrashCymbal1" id="F:Midi.Percussion.CrashCymbal1" access="Public" contract="Static" literal="true" value="49" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 49 ("Crash Cymbal 1").</summary></documentation>
          </field>
          <field name="HighTom1" id="F:Midi.Percussion.HighTom1" access="Public" contract="Static" literal="true" value="50" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 50 ("High Tom 1").</summary></documentation>
          </field>
          <field name="RideCymbal1" id="F:Midi.Percussion.RideCymbal1" access="Public" contract="Static" literal="true" value="51" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 51 ("Ride Cymbal 1").</summary></documentation>
          </field>
          <field name="ChineseCymbal" id="F:Midi.Percussion.ChineseCymbal" access="Public" contract="Static" literal="true" value="52" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 52 ("Chinese Cymbal").</summary></documentation>
          </field>
          <field name="RideBell" id="F:Midi.Percussion.RideBell" access="Public" contract="Static" literal="true" value="53" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 53 ("Ride Bell").</summary></documentation>
          </field>
          <field name="Tambourine" id="F:Midi.Percussion.Tambourine" access="Public" contract="Static" literal="true" value="54" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 54 ("Tambourine").</summary></documentation>
          </field>
          <field name="SplashCymbal" id="F:Midi.Percussion.SplashCymbal" access="Public" contract="Static" literal="true" value="55" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 55 ("Splash Cymbal").</summary></documentation>
          </field>
          <field name="Cowbell" id="F:Midi.Percussion.Cowbell" access="Public" contract="Static" literal="true" value="56" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 56 ("Cowbell").</summary></documentation>
          </field>
          <field name="CrashCymbal2" id="F:Midi.Percussion.CrashCymbal2" access="Public" contract="Static" literal="true" value="57" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 57 ("Crash Cymbal 2").</summary></documentation>
          </field>
          <field name="VibraSlap" id="F:Midi.Percussion.VibraSlap" access="Public" contract="Static" literal="true" value="58" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 58 ("Vibra Slap").</summary></documentation>
          </field>
          <field name="RideCymbal2" id="F:Midi.Percussion.RideCymbal2" access="Public" contract="Static" literal="true" value="59" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 59 ("Ride Cymbal 2").</summary></documentation>
          </field>
          <field name="HighBongo" id="F:Midi.Percussion.HighBongo" access="Public" contract="Static" literal="true" value="60" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 60 ("High Bongo").</summary></documentation>
          </field>
          <field name="LowBongo" id="F:Midi.Percussion.LowBongo" access="Public" contract="Static" literal="true" value="61" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 61 ("Low Bongo").</summary></documentation>
          </field>
          <field name="MuteHighConga" id="F:Midi.Percussion.MuteHighConga" access="Public" contract="Static" literal="true" value="62" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 62 ("Mute High Conga").</summary></documentation>
          </field>
          <field name="OpenHighConga" id="F:Midi.Percussion.OpenHighConga" access="Public" contract="Static" literal="true" value="63" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 63 ("Open High Conga").</summary></documentation>
          </field>
          <field name="LowConga" id="F:Midi.Percussion.LowConga" access="Public" contract="Static" literal="true" value="64" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 64 ("Low Conga").</summary></documentation>
          </field>
          <field name="HighTimbale" id="F:Midi.Percussion.HighTimbale" access="Public" contract="Static" literal="true" value="65" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 65 ("High Timbale").</summary></documentation>
          </field>
          <field name="LowTimbale" id="F:Midi.Percussion.LowTimbale" access="Public" contract="Static" literal="true" value="66" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 66 ("Low Timbale").</summary></documentation>
          </field>
          <field name="HighAgogo" id="F:Midi.Percussion.HighAgogo" access="Public" contract="Static" literal="true" value="67" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 67 ("High Agogo").</summary></documentation>
          </field>
          <field name="LowAgogo" id="F:Midi.Percussion.LowAgogo" access="Public" contract="Static" literal="true" value="68" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 68 ("Low Agogo").</summary></documentation>
          </field>
          <field name="Cabasa" id="F:Midi.Percussion.Cabasa" access="Public" contract="Static" literal="true" value="69" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 69 ("Cabasa").</summary></documentation>
          </field>
          <field name="Maracas" id="F:Midi.Percussion.Maracas" access="Public" contract="Static" literal="true" value="70" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 70 ("Maracas").</summary></documentation>
          </field>
          <field name="ShortWhistle" id="F:Midi.Percussion.ShortWhistle" access="Public" contract="Static" literal="true" value="71" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 71 ("Short Whistle").</summary></documentation>
          </field>
          <field name="LongWhistle" id="F:Midi.Percussion.LongWhistle" access="Public" contract="Static" literal="true" value="72" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 72 ("Long Whistle").</summary></documentation>
          </field>
          <field name="ShortGuiro" id="F:Midi.Percussion.ShortGuiro" access="Public" contract="Static" literal="true" value="74" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 73 ("Short Guiro").</summary></documentation>
          </field>
          <field name="LongGuiro" id="F:Midi.Percussion.LongGuiro" access="Public" contract="Static" literal="true" value="74" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 74 ("Long Guiro").</summary></documentation>
          </field>
          <field name="Claves" id="F:Midi.Percussion.Claves" access="Public" contract="Static" literal="true" value="75" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 75 ("Claves").</summary></documentation>
          </field>
          <field name="HighWoodBlock" id="F:Midi.Percussion.HighWoodBlock" access="Public" contract="Static" literal="true" value="76" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 76 ("High Wood Block").</summary></documentation>
          </field>
          <field name="LowWoodBlock" id="F:Midi.Percussion.LowWoodBlock" access="Public" contract="Static" literal="true" value="77" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 77 ("Low Wood Block").</summary></documentation>
          </field>
          <field name="MuteCuica" id="F:Midi.Percussion.MuteCuica" access="Public" contract="Static" literal="true" value="78" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 78 ("Mute Cuica").</summary></documentation>
          </field>
          <field name="OpenCuica" id="F:Midi.Percussion.OpenCuica" access="Public" contract="Static" literal="true" value="79" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 79 ("Open Cuica").</summary></documentation>
          </field>
          <field name="MuteTriangle" id="F:Midi.Percussion.MuteTriangle" access="Public" contract="Static" literal="true" value="80" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 80 ("Mute Triangle").</summary></documentation>
          </field>
          <field name="OpenTriangle" id="F:Midi.Percussion.OpenTriangle" access="Public" contract="Static" literal="true" value="81" typeId="T:Midi.Percussion" displayName="Percussion" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>General MIDI percussion 81 ("Open Triangle").</summary></documentation>
          </field>
        </enumeration>
        <enumeration name="Pitch" id="T:Midi.Pitch" displayName="Pitch" namespace="Midi" access="Public">
          <documentation><summary> Pitches supported by MIDI. </summary>
<remarks>
  <para>MIDI defines 127 distinct pitches, in semitone intervals, ranging from C five octaves below middle C, up to G five octaves above middle C. This covers several octaves above and below the range of a normal 88-key piano.</para>
  <para>These 127 pitches are the only ones directly expressible in MIDI. Precise variations in frequency can be achieved with <see cref="M:Midi.OutputDevice.SendPitchBend(Midi.Channel,System.Int32)">Pitch Bend</see> messages, though Pitch Bend messages apply to the whole channel at once.</para>
  <para>In this enum, pitches are given C Major note names (eg "F", "GSharp") followed by the octave number. Octaves use standard piano terminology: Middle C is in octave 4. (Note that this is different from "MIDI octaves", which have Middle C in octave 0.)</para>
  <para>This enum has extension methods, such as <see cref="M:Midi.PitchExtensionMethods.NotePreferringSharps(Midi.Pitch)" /> and <see cref="M:Midi.PitchExtensionMethods.IsInMidiRange(Midi.Pitch)" />, defined in <see cref="T:Midi.PitchExtensionMethods" />. </para>
</remarks>
<seealso cref="T:Midi.Note" />
<seealso cref="T:Midi.Interval" /></documentation>
          <field name="CNeg1" id="F:Midi.Pitch.CNeg1" access="Public" contract="Static" literal="true" value="0" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C in octave -1.</summary></documentation>
          </field>
          <field name="CSharpNeg1" id="F:Midi.Pitch.CSharpNeg1" access="Public" contract="Static" literal="true" value="1" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C# in octave -1.</summary></documentation>
          </field>
          <field name="DNeg1" id="F:Midi.Pitch.DNeg1" access="Public" contract="Static" literal="true" value="2" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D in octave -1.</summary></documentation>
          </field>
          <field name="DSharpNeg1" id="F:Midi.Pitch.DSharpNeg1" access="Public" contract="Static" literal="true" value="3" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D# in octave -1.</summary></documentation>
          </field>
          <field name="ENeg1" id="F:Midi.Pitch.ENeg1" access="Public" contract="Static" literal="true" value="4" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>E in octave -1.</summary></documentation>
          </field>
          <field name="FNeg1" id="F:Midi.Pitch.FNeg1" access="Public" contract="Static" literal="true" value="5" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F in octave -1.</summary></documentation>
          </field>
          <field name="FSharpNeg1" id="F:Midi.Pitch.FSharpNeg1" access="Public" contract="Static" literal="true" value="6" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F# in octave -1.</summary></documentation>
          </field>
          <field name="GNeg1" id="F:Midi.Pitch.GNeg1" access="Public" contract="Static" literal="true" value="7" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G in octave -1.</summary></documentation>
          </field>
          <field name="GSharpNeg1" id="F:Midi.Pitch.GSharpNeg1" access="Public" contract="Static" literal="true" value="8" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G# in octave -1.</summary></documentation>
          </field>
          <field name="ANeg1" id="F:Midi.Pitch.ANeg1" access="Public" contract="Static" literal="true" value="9" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A in octave -1.</summary></documentation>
          </field>
          <field name="ASharpNeg1" id="F:Midi.Pitch.ASharpNeg1" access="Public" contract="Static" literal="true" value="10" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A# in octave -1.</summary></documentation>
          </field>
          <field name="BNeg1" id="F:Midi.Pitch.BNeg1" access="Public" contract="Static" literal="true" value="11" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>B in octave -1.</summary></documentation>
          </field>
          <field name="C0" id="F:Midi.Pitch.C0" access="Public" contract="Static" literal="true" value="12" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C in octave 0.</summary></documentation>
          </field>
          <field name="CSharp0" id="F:Midi.Pitch.CSharp0" access="Public" contract="Static" literal="true" value="13" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C# in octave 0.</summary></documentation>
          </field>
          <field name="D0" id="F:Midi.Pitch.D0" access="Public" contract="Static" literal="true" value="14" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D in octave 0.</summary></documentation>
          </field>
          <field name="DSharp0" id="F:Midi.Pitch.DSharp0" access="Public" contract="Static" literal="true" value="15" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D# in octave 0.</summary></documentation>
          </field>
          <field name="E0" id="F:Midi.Pitch.E0" access="Public" contract="Static" literal="true" value="16" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>E in octave 0.</summary></documentation>
          </field>
          <field name="F0" id="F:Midi.Pitch.F0" access="Public" contract="Static" literal="true" value="17" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F in octave 0.</summary></documentation>
          </field>
          <field name="FSharp0" id="F:Midi.Pitch.FSharp0" access="Public" contract="Static" literal="true" value="18" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F# in octave 0.</summary></documentation>
          </field>
          <field name="G0" id="F:Midi.Pitch.G0" access="Public" contract="Static" literal="true" value="19" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G in octave 0.</summary></documentation>
          </field>
          <field name="GSharp0" id="F:Midi.Pitch.GSharp0" access="Public" contract="Static" literal="true" value="20" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G# in octave 0.</summary></documentation>
          </field>
          <field name="A0" id="F:Midi.Pitch.A0" access="Public" contract="Static" literal="true" value="21" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A in octave 0.</summary></documentation>
          </field>
          <field name="ASharp0" id="F:Midi.Pitch.ASharp0" access="Public" contract="Static" literal="true" value="22" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A# in octave 0, usually the lowest key on an 88-key keyboard.</summary></documentation>
          </field>
          <field name="B0" id="F:Midi.Pitch.B0" access="Public" contract="Static" literal="true" value="23" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>B in octave 0.</summary></documentation>
          </field>
          <field name="C1" id="F:Midi.Pitch.C1" access="Public" contract="Static" literal="true" value="24" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C in octave 1.</summary></documentation>
          </field>
          <field name="CSharp1" id="F:Midi.Pitch.CSharp1" access="Public" contract="Static" literal="true" value="25" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C# in octave 1.</summary></documentation>
          </field>
          <field name="D1" id="F:Midi.Pitch.D1" access="Public" contract="Static" literal="true" value="26" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D in octave 1.</summary></documentation>
          </field>
          <field name="DSharp1" id="F:Midi.Pitch.DSharp1" access="Public" contract="Static" literal="true" value="27" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D# in octave 1.</summary></documentation>
          </field>
          <field name="E1" id="F:Midi.Pitch.E1" access="Public" contract="Static" literal="true" value="28" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>E in octave 1.</summary></documentation>
          </field>
          <field name="F1" id="F:Midi.Pitch.F1" access="Public" contract="Static" literal="true" value="29" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F in octave 1.</summary></documentation>
          </field>
          <field name="FSharp1" id="F:Midi.Pitch.FSharp1" access="Public" contract="Static" literal="true" value="30" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F# in octave 1.</summary></documentation>
          </field>
          <field name="G1" id="F:Midi.Pitch.G1" access="Public" contract="Static" literal="true" value="31" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G in octave 1.</summary></documentation>
          </field>
          <field name="GSharp1" id="F:Midi.Pitch.GSharp1" access="Public" contract="Static" literal="true" value="32" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G# in octave 1.</summary></documentation>
          </field>
          <field name="A1" id="F:Midi.Pitch.A1" access="Public" contract="Static" literal="true" value="33" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A in octave 1.</summary></documentation>
          </field>
          <field name="ASharp1" id="F:Midi.Pitch.ASharp1" access="Public" contract="Static" literal="true" value="34" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A# in octave 1.</summary></documentation>
          </field>
          <field name="B1" id="F:Midi.Pitch.B1" access="Public" contract="Static" literal="true" value="35" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>B in octave 1.</summary></documentation>
          </field>
          <field name="C2" id="F:Midi.Pitch.C2" access="Public" contract="Static" literal="true" value="36" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C in octave 2.</summary></documentation>
          </field>
          <field name="CSharp2" id="F:Midi.Pitch.CSharp2" access="Public" contract="Static" literal="true" value="37" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C# in octave 2.</summary></documentation>
          </field>
          <field name="D2" id="F:Midi.Pitch.D2" access="Public" contract="Static" literal="true" value="38" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D in octave 2.</summary></documentation>
          </field>
          <field name="DSharp2" id="F:Midi.Pitch.DSharp2" access="Public" contract="Static" literal="true" value="39" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D# in octave 2.</summary></documentation>
          </field>
          <field name="E2" id="F:Midi.Pitch.E2" access="Public" contract="Static" literal="true" value="40" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>E in octave 2.</summary></documentation>
          </field>
          <field name="F2" id="F:Midi.Pitch.F2" access="Public" contract="Static" literal="true" value="41" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F in octave 2.</summary></documentation>
          </field>
          <field name="FSharp2" id="F:Midi.Pitch.FSharp2" access="Public" contract="Static" literal="true" value="42" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F# in octave 2.</summary></documentation>
          </field>
          <field name="G2" id="F:Midi.Pitch.G2" access="Public" contract="Static" literal="true" value="43" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G in octave 2.</summary></documentation>
          </field>
          <field name="GSharp2" id="F:Midi.Pitch.GSharp2" access="Public" contract="Static" literal="true" value="44" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G# in octave 2.</summary></documentation>
          </field>
          <field name="A2" id="F:Midi.Pitch.A2" access="Public" contract="Static" literal="true" value="45" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A in octave 2.</summary></documentation>
          </field>
          <field name="ASharp2" id="F:Midi.Pitch.ASharp2" access="Public" contract="Static" literal="true" value="46" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A# in octave 2.</summary></documentation>
          </field>
          <field name="B2" id="F:Midi.Pitch.B2" access="Public" contract="Static" literal="true" value="47" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>B in octave 2.</summary></documentation>
          </field>
          <field name="C3" id="F:Midi.Pitch.C3" access="Public" contract="Static" literal="true" value="48" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C in octave 3.</summary></documentation>
          </field>
          <field name="CSharp3" id="F:Midi.Pitch.CSharp3" access="Public" contract="Static" literal="true" value="49" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C# in octave 3.</summary></documentation>
          </field>
          <field name="D3" id="F:Midi.Pitch.D3" access="Public" contract="Static" literal="true" value="50" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D in octave 3.</summary></documentation>
          </field>
          <field name="DSharp3" id="F:Midi.Pitch.DSharp3" access="Public" contract="Static" literal="true" value="51" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D# in octave 3.</summary></documentation>
          </field>
          <field name="E3" id="F:Midi.Pitch.E3" access="Public" contract="Static" literal="true" value="52" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>E in octave 3.</summary></documentation>
          </field>
          <field name="F3" id="F:Midi.Pitch.F3" access="Public" contract="Static" literal="true" value="53" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F in octave 3.</summary></documentation>
          </field>
          <field name="FSharp3" id="F:Midi.Pitch.FSharp3" access="Public" contract="Static" literal="true" value="54" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F# in octave 3.</summary></documentation>
          </field>
          <field name="G3" id="F:Midi.Pitch.G3" access="Public" contract="Static" literal="true" value="55" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G in octave 3.</summary></documentation>
          </field>
          <field name="GSharp3" id="F:Midi.Pitch.GSharp3" access="Public" contract="Static" literal="true" value="56" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G# in octave 3.</summary></documentation>
          </field>
          <field name="A3" id="F:Midi.Pitch.A3" access="Public" contract="Static" literal="true" value="57" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A in octave 3.</summary></documentation>
          </field>
          <field name="ASharp3" id="F:Midi.Pitch.ASharp3" access="Public" contract="Static" literal="true" value="58" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A# in octave 3.</summary></documentation>
          </field>
          <field name="B3" id="F:Midi.Pitch.B3" access="Public" contract="Static" literal="true" value="59" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>B in octave 3.</summary></documentation>
          </field>
          <field name="C4" id="F:Midi.Pitch.C4" access="Public" contract="Static" literal="true" value="60" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C in octave 4, also known as Middle C.</summary></documentation>
          </field>
          <field name="CSharp4" id="F:Midi.Pitch.CSharp4" access="Public" contract="Static" literal="true" value="61" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C# in octave 4.</summary></documentation>
          </field>
          <field name="D4" id="F:Midi.Pitch.D4" access="Public" contract="Static" literal="true" value="62" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D in octave 4.</summary></documentation>
          </field>
          <field name="DSharp4" id="F:Midi.Pitch.DSharp4" access="Public" contract="Static" literal="true" value="63" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D# in octave 4.</summary></documentation>
          </field>
          <field name="E4" id="F:Midi.Pitch.E4" access="Public" contract="Static" literal="true" value="64" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>E in octave 4.</summary></documentation>
          </field>
          <field name="F4" id="F:Midi.Pitch.F4" access="Public" contract="Static" literal="true" value="65" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F in octave 4.</summary></documentation>
          </field>
          <field name="FSharp4" id="F:Midi.Pitch.FSharp4" access="Public" contract="Static" literal="true" value="66" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F# in octave 4.</summary></documentation>
          </field>
          <field name="G4" id="F:Midi.Pitch.G4" access="Public" contract="Static" literal="true" value="67" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G in octave 4.</summary></documentation>
          </field>
          <field name="GSharp4" id="F:Midi.Pitch.GSharp4" access="Public" contract="Static" literal="true" value="68" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G# in octave 4.</summary></documentation>
          </field>
          <field name="A4" id="F:Midi.Pitch.A4" access="Public" contract="Static" literal="true" value="69" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A in octave 4.</summary></documentation>
          </field>
          <field name="ASharp4" id="F:Midi.Pitch.ASharp4" access="Public" contract="Static" literal="true" value="70" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A# in octave 4.</summary></documentation>
          </field>
          <field name="B4" id="F:Midi.Pitch.B4" access="Public" contract="Static" literal="true" value="71" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>B in octave 4.</summary></documentation>
          </field>
          <field name="C5" id="F:Midi.Pitch.C5" access="Public" contract="Static" literal="true" value="72" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C in octave 5.</summary></documentation>
          </field>
          <field name="CSharp5" id="F:Midi.Pitch.CSharp5" access="Public" contract="Static" literal="true" value="73" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C# in octave 5.</summary></documentation>
          </field>
          <field name="D5" id="F:Midi.Pitch.D5" access="Public" contract="Static" literal="true" value="74" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D in octave 5.</summary></documentation>
          </field>
          <field name="DSharp5" id="F:Midi.Pitch.DSharp5" access="Public" contract="Static" literal="true" value="75" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D# in octave 5.</summary></documentation>
          </field>
          <field name="E5" id="F:Midi.Pitch.E5" access="Public" contract="Static" literal="true" value="76" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>E in octave 5.</summary></documentation>
          </field>
          <field name="F5" id="F:Midi.Pitch.F5" access="Public" contract="Static" literal="true" value="77" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F in octave 5.</summary></documentation>
          </field>
          <field name="FSharp5" id="F:Midi.Pitch.FSharp5" access="Public" contract="Static" literal="true" value="78" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F# in octave 5.</summary></documentation>
          </field>
          <field name="G5" id="F:Midi.Pitch.G5" access="Public" contract="Static" literal="true" value="79" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G in octave 5.</summary></documentation>
          </field>
          <field name="GSharp5" id="F:Midi.Pitch.GSharp5" access="Public" contract="Static" literal="true" value="80" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G# in octave 5.</summary></documentation>
          </field>
          <field name="A5" id="F:Midi.Pitch.A5" access="Public" contract="Static" literal="true" value="81" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A in octave 5.</summary></documentation>
          </field>
          <field name="ASharp5" id="F:Midi.Pitch.ASharp5" access="Public" contract="Static" literal="true" value="82" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A# in octave 5.</summary></documentation>
          </field>
          <field name="B5" id="F:Midi.Pitch.B5" access="Public" contract="Static" literal="true" value="83" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>B in octave 5.</summary></documentation>
          </field>
          <field name="C6" id="F:Midi.Pitch.C6" access="Public" contract="Static" literal="true" value="84" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C in octave 6.</summary></documentation>
          </field>
          <field name="CSharp6" id="F:Midi.Pitch.CSharp6" access="Public" contract="Static" literal="true" value="85" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C# in octave 6.</summary></documentation>
          </field>
          <field name="D6" id="F:Midi.Pitch.D6" access="Public" contract="Static" literal="true" value="86" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D in octave 6.</summary></documentation>
          </field>
          <field name="DSharp6" id="F:Midi.Pitch.DSharp6" access="Public" contract="Static" literal="true" value="87" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D# in octave 6.</summary></documentation>
          </field>
          <field name="E6" id="F:Midi.Pitch.E6" access="Public" contract="Static" literal="true" value="88" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>E in octave 6.</summary></documentation>
          </field>
          <field name="F6" id="F:Midi.Pitch.F6" access="Public" contract="Static" literal="true" value="89" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F in octave 6.</summary></documentation>
          </field>
          <field name="FSharp6" id="F:Midi.Pitch.FSharp6" access="Public" contract="Static" literal="true" value="90" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F# in octave 6.</summary></documentation>
          </field>
          <field name="G6" id="F:Midi.Pitch.G6" access="Public" contract="Static" literal="true" value="91" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G in octave 6.</summary></documentation>
          </field>
          <field name="GSharp6" id="F:Midi.Pitch.GSharp6" access="Public" contract="Static" literal="true" value="92" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G# in octave 6.</summary></documentation>
          </field>
          <field name="A6" id="F:Midi.Pitch.A6" access="Public" contract="Static" literal="true" value="93" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A in octave 6.</summary></documentation>
          </field>
          <field name="ASharp6" id="F:Midi.Pitch.ASharp6" access="Public" contract="Static" literal="true" value="94" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A# in octave 6.</summary></documentation>
          </field>
          <field name="B6" id="F:Midi.Pitch.B6" access="Public" contract="Static" literal="true" value="95" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>B in octave 6.</summary></documentation>
          </field>
          <field name="C7" id="F:Midi.Pitch.C7" access="Public" contract="Static" literal="true" value="96" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C in octave 7.</summary></documentation>
          </field>
          <field name="CSharp7" id="F:Midi.Pitch.CSharp7" access="Public" contract="Static" literal="true" value="97" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C# in octave 7.</summary></documentation>
          </field>
          <field name="D7" id="F:Midi.Pitch.D7" access="Public" contract="Static" literal="true" value="98" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D in octave 7.</summary></documentation>
          </field>
          <field name="DSharp7" id="F:Midi.Pitch.DSharp7" access="Public" contract="Static" literal="true" value="99" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D# in octave 7.</summary></documentation>
          </field>
          <field name="E7" id="F:Midi.Pitch.E7" access="Public" contract="Static" literal="true" value="100" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>E in octave 7.</summary></documentation>
          </field>
          <field name="F7" id="F:Midi.Pitch.F7" access="Public" contract="Static" literal="true" value="101" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F in octave 7.</summary></documentation>
          </field>
          <field name="FSharp7" id="F:Midi.Pitch.FSharp7" access="Public" contract="Static" literal="true" value="102" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F# in octave 7.</summary></documentation>
          </field>
          <field name="G7" id="F:Midi.Pitch.G7" access="Public" contract="Static" literal="true" value="103" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G in octave 7.</summary></documentation>
          </field>
          <field name="GSharp7" id="F:Midi.Pitch.GSharp7" access="Public" contract="Static" literal="true" value="104" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G# in octave 7.</summary></documentation>
          </field>
          <field name="A7" id="F:Midi.Pitch.A7" access="Public" contract="Static" literal="true" value="105" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A in octave 7.</summary></documentation>
          </field>
          <field name="ASharp7" id="F:Midi.Pitch.ASharp7" access="Public" contract="Static" literal="true" value="106" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A# in octave 7.</summary></documentation>
          </field>
          <field name="B7" id="F:Midi.Pitch.B7" access="Public" contract="Static" literal="true" value="107" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>B in octave 7.</summary></documentation>
          </field>
          <field name="C8" id="F:Midi.Pitch.C8" access="Public" contract="Static" literal="true" value="108" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C in octave 8, usually the highest key on an 88-key keyboard.</summary></documentation>
          </field>
          <field name="CSharp8" id="F:Midi.Pitch.CSharp8" access="Public" contract="Static" literal="true" value="109" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C# in octave 8.</summary></documentation>
          </field>
          <field name="D8" id="F:Midi.Pitch.D8" access="Public" contract="Static" literal="true" value="110" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D in octave 8.</summary></documentation>
          </field>
          <field name="DSharp8" id="F:Midi.Pitch.DSharp8" access="Public" contract="Static" literal="true" value="111" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D# in octave 8.</summary></documentation>
          </field>
          <field name="E8" id="F:Midi.Pitch.E8" access="Public" contract="Static" literal="true" value="112" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>E in octave 8.</summary></documentation>
          </field>
          <field name="F8" id="F:Midi.Pitch.F8" access="Public" contract="Static" literal="true" value="113" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F in octave 8.</summary></documentation>
          </field>
          <field name="FSharp8" id="F:Midi.Pitch.FSharp8" access="Public" contract="Static" literal="true" value="114" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F# in octave 8.</summary></documentation>
          </field>
          <field name="G8" id="F:Midi.Pitch.G8" access="Public" contract="Static" literal="true" value="115" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G in octave 8.</summary></documentation>
          </field>
          <field name="GSharp8" id="F:Midi.Pitch.GSharp8" access="Public" contract="Static" literal="true" value="116" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G# in octave 8.</summary></documentation>
          </field>
          <field name="A8" id="F:Midi.Pitch.A8" access="Public" contract="Static" literal="true" value="117" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A in octave 8.</summary></documentation>
          </field>
          <field name="ASharp8" id="F:Midi.Pitch.ASharp8" access="Public" contract="Static" literal="true" value="118" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>A# in octave 8.</summary></documentation>
          </field>
          <field name="B8" id="F:Midi.Pitch.B8" access="Public" contract="Static" literal="true" value="119" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>B in octave 8.</summary></documentation>
          </field>
          <field name="C9" id="F:Midi.Pitch.C9" access="Public" contract="Static" literal="true" value="120" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C in octave 9.</summary></documentation>
          </field>
          <field name="CSharp9" id="F:Midi.Pitch.CSharp9" access="Public" contract="Static" literal="true" value="121" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>C# in octave 9.</summary></documentation>
          </field>
          <field name="D9" id="F:Midi.Pitch.D9" access="Public" contract="Static" literal="true" value="122" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D in octave 9.</summary></documentation>
          </field>
          <field name="DSharp9" id="F:Midi.Pitch.DSharp9" access="Public" contract="Static" literal="true" value="123" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>D# in octave 9.</summary></documentation>
          </field>
          <field name="E9" id="F:Midi.Pitch.E9" access="Public" contract="Static" literal="true" value="124" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>E in octave 9.</summary></documentation>
          </field>
          <field name="F9" id="F:Midi.Pitch.F9" access="Public" contract="Static" literal="true" value="125" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F in octave 9.</summary></documentation>
          </field>
          <field name="FSharp9" id="F:Midi.Pitch.FSharp9" access="Public" contract="Static" literal="true" value="126" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>F# in octave 9.</summary></documentation>
          </field>
          <field name="G9" id="F:Midi.Pitch.G9" access="Public" contract="Static" literal="true" value="127" typeId="T:Midi.Pitch" displayName="Pitch" namespace="Midi" assembly="Midi" nullable="false" valueType="true">
            <documentation><summary>G in octave 9.</summary></documentation>
          </field>
        </enumeration>
      </namespace>
    </module>
  </assembly>
</ndoc>